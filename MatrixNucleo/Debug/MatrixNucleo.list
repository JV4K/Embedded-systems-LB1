
MatrixNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e08  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c68  08006c68  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          0000025c  20000218  20000218  00020218  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d896  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238b  00000000  00000000  0002dada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be0  00000000  00000000  00030b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252e4  00000000  00000000  00031770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f662  00000000  00000000  00056a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dafc6  00000000  00000000  000660b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014107c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a70  00000000  00000000  001410cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e40 	.word	0x08003e40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	08003e40 	.word	0x08003e40

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <disp1color_FillScreenbuff>:
extern uint8_t data1[16], data2[16], data3[16], data4[16];

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2240      	movs	r2, #64	; 0x40
 80005d2:	4619      	mov	r1, r3
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <disp1color_FillScreenbuff+0x20>)
 80005d6:	f002 ffa3 	bl	8003520 <memset>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200002b4 	.word	0x200002b4

080005e8 <disp1color_UpdateFromBuff>:
//==============================================================================

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80005ec:	2140      	movs	r1, #64	; 0x40
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <disp1color_UpdateFromBuff+0x10>)
 80005f0:	f000 f98d 	bl	800090e <DMD_1COLOR_DisplayFullUpdate>

	//printf("BUF horz:\n");
	//print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200002b4 	.word	0x200002b4

080005fc <disp1color_printf>:

//==============================================================================
// Процедура выводит на дисплей форматированную строку
//==============================================================================
void disp1color_printf(int16_t X, int16_t Y, uint8_t FontID, const char *args,
		...) {
 80005fc:	b408      	push	{r3}
 80005fe:	b580      	push	{r7, lr}
 8000600:	b09d      	sub	sp, #116	; 0x74
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
 8000608:	460b      	mov	r3, r1
 800060a:	80bb      	strh	r3, [r7, #4]
 800060c:	4613      	mov	r3, r2
 800060e:	70fb      	strb	r3, [r7, #3]
	char StrBuff[100];

	//Формирование массива из переданных аргументов
	va_list ap;
	va_start(ap, args);
 8000610:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000614:	60bb      	str	r3, [r7, #8]
	vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 8000616:	f107 000c 	add.w	r0, r7, #12
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800061e:	2164      	movs	r1, #100	; 0x64
 8000620:	f002 ffc0 	bl	80035a4 <vsniprintf>
	va_end(ap);

	disp1color_DrawString(X, Y, FontID, (uint8_t*) StrBuff);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	78fa      	ldrb	r2, [r7, #3]
 800062a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800062e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000632:	f000 f91b 	bl	800086c <disp1color_DrawString>
}
 8000636:	bf00      	nop
 8000638:	3774      	adds	r7, #116	; 0x74
 800063a:	46bd      	mov	sp, r7
 800063c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000640:	b001      	add	sp, #4
 8000642:	4770      	bx	lr

08000644 <disp1color_DrawPixel>:
//==============================================================================

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State) {
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
 800064e:	460b      	mov	r3, r1
 8000650:	80bb      	strh	r3, [r7, #4]
 8000652:	4613      	mov	r3, r2
 8000654:	70fb      	strb	r3, [r7, #3]
	//Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
	// Проверяем, находится ли точка в поле отрисовки дисплея
	if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0)
 8000656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065a:	2b1f      	cmp	r3, #31
 800065c:	dc48      	bgt.n	80006f0 <disp1color_DrawPixel+0xac>
 800065e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000662:	2b0f      	cmp	r3, #15
 8000664:	dc44      	bgt.n	80006f0 <disp1color_DrawPixel+0xac>
 8000666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db40      	blt.n	80006f0 <disp1color_DrawPixel+0xac>
			|| (Y < 0))
 800066e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db3c      	blt.n	80006f0 <disp1color_DrawPixel+0xac>
		return;

	//Байты относительно матрицы расположены вертикально, в 2 ряда
	uint16_t ByteIdx = Y >> 3;
 8000676:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800067a:	10db      	asrs	r3, r3, #3
 800067c:	b21b      	sxth	r3, r3
 800067e:	81fb      	strh	r3, [r7, #14]
	uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	89fb      	ldrh	r3, [r7, #14]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	737b      	strb	r3, [r7, #13]
	ByteIdx *= DISP1COLOR_Width;
 8000690:	89fb      	ldrh	r3, [r7, #14]
 8000692:	015b      	lsls	r3, r3, #5
 8000694:	81fb      	strh	r3, [r7, #14]
	ByteIdx += X;
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	4413      	add	r3, r2
 800069c:	81fb      	strh	r3, [r7, #14]

	//Заполнение буфера данных для отрисовки
	if (State)
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00f      	beq.n	80006c4 <disp1color_DrawPixel+0x80>
		disp1color_buff[ByteIdx] |= (1 << BitIdx);
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <disp1color_DrawPixel+0xb8>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	b25a      	sxtb	r2, r3
 80006ac:	7b7b      	ldrb	r3, [r7, #13]
 80006ae:	2101      	movs	r1, #1
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	b2d1      	uxtb	r1, r2
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <disp1color_DrawPixel+0xb8>)
 80006c0:	54d1      	strb	r1, [r2, r3]
 80006c2:	e010      	b.n	80006e6 <disp1color_DrawPixel+0xa2>
	else
		disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <disp1color_DrawPixel+0xb8>)
 80006c8:	5cd3      	ldrb	r3, [r2, r3]
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	4013      	ands	r3, r2
 80006dc:	b25a      	sxtb	r2, r3
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	b2d1      	uxtb	r1, r2
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <disp1color_DrawPixel+0xb8>)
 80006e4:	54d1      	strb	r1, [r2, r3]

	// printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
	uint8_t buf = disp1color_buff[ByteIdx];
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <disp1color_DrawPixel+0xb8>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	733b      	strb	r3, [r7, #12]
 80006ee:	e000      	b.n	80006f2 <disp1color_DrawPixel+0xae>
		return;
 80006f0:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200002b4 	.word	0x200002b4

08000700 <disp1color_DrawChar>:
//==============================================================================

//==============================================================================
// Функция вывода символа Char на дисплей. Возвращает ширину выведенного символа
//==============================================================================
uint8_t disp1color_DrawChar(int16_t X, int16_t Y, uint8_t FontID, uint8_t Char) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	4604      	mov	r4, r0
 8000708:	4608      	mov	r0, r1
 800070a:	4611      	mov	r1, r2
 800070c:	461a      	mov	r2, r3
 800070e:	4623      	mov	r3, r4
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	4603      	mov	r3, r0
 8000714:	80bb      	strh	r3, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	70fb      	strb	r3, [r7, #3]
 800071a:	4613      	mov	r3, r2
 800071c:	70bb      	strb	r3, [r7, #2]

	// Указатель на подтабличку конкретного символа шрифта
	uint8_t *pCharTable = font_GetFontStruct(FontID, Char);
 800071e:	78ba      	ldrb	r2, [r7, #2]
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fa85 	bl	8000c34 <font_GetFontStruct>
 800072a:	6138      	str	r0, [r7, #16]
	uint8_t CharWidth = font_GetCharWidth(pCharTable);    // Ширина символа
 800072c:	6938      	ldr	r0, [r7, #16]
 800072e:	f000 fa97 	bl	8000c60 <font_GetCharWidth>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
	uint8_t CharHeight = font_GetCharHeight(pCharTable);  // Высота символа
 8000736:	6938      	ldr	r0, [r7, #16]
 8000738:	f000 fa9e 	bl	8000c78 <font_GetCharHeight>
 800073c:	4603      	mov	r3, r0
 800073e:	73bb      	strb	r3, [r7, #14]
	pCharTable += 2;
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	3302      	adds	r3, #2
 8000744:	613b      	str	r3, [r7, #16]

	if (FontID == FONTID_6X8M) {
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d132      	bne.n	80007b2 <disp1color_DrawChar+0xb2>
		for (uint8_t row = 0; row < CharHeight; row++) {
 800074c:	2300      	movs	r3, #0
 800074e:	75fb      	strb	r3, [r7, #23]
 8000750:	e02a      	b.n	80007a8 <disp1color_DrawChar+0xa8>
			for (uint8_t col = 0; col < CharWidth; col++) {
 8000752:	2300      	movs	r3, #0
 8000754:	75bb      	strb	r3, [r7, #22]
 8000756:	e020      	b.n	800079a <disp1color_DrawChar+0x9a>

				//printf("X+col=%d%s%d%s", X + col, " Y+row=", Y + row, "\n");
				disp1color_DrawPixel(X + col, Y + row,
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	b29a      	uxth	r2, r3
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	b218      	sxth	r0, r3
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	b29a      	uxth	r2, r3
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b219      	sxth	r1, r3
						pCharTable[row] & (1 << (7 - col)));
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b25a      	sxtb	r2, r3
 800077a:	7dbb      	ldrb	r3, [r7, #22]
 800077c:	f1c3 0307 	rsb	r3, r3, #7
 8000780:	2401      	movs	r4, #1
 8000782:	fa04 f303 	lsl.w	r3, r4, r3
 8000786:	b25b      	sxtb	r3, r3
 8000788:	4013      	ands	r3, r2
 800078a:	b25b      	sxtb	r3, r3
				disp1color_DrawPixel(X + col, Y + row,
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	f7ff ff58 	bl	8000644 <disp1color_DrawPixel>
			for (uint8_t col = 0; col < CharWidth; col++) {
 8000794:	7dbb      	ldrb	r3, [r7, #22]
 8000796:	3301      	adds	r3, #1
 8000798:	75bb      	strb	r3, [r7, #22]
 800079a:	7dba      	ldrb	r2, [r7, #22]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3da      	bcc.n	8000758 <disp1color_DrawChar+0x58>
		for (uint8_t row = 0; row < CharHeight; row++) {
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	3301      	adds	r3, #1
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	7dfa      	ldrb	r2, [r7, #23]
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d3d0      	bcc.n	8000752 <disp1color_DrawChar+0x52>
 80007b0:	e057      	b.n	8000862 <disp1color_DrawChar+0x162>
			}
		}
	} else {
		for (uint8_t row = 0; row < CharHeight; row++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	757b      	strb	r3, [r7, #21]
 80007b6:	e050      	b.n	800085a <disp1color_DrawChar+0x15a>
			for (uint8_t col = 0; col < CharWidth; col++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	753b      	strb	r3, [r7, #20]
 80007bc:	e046      	b.n	800084c <disp1color_DrawChar+0x14c>
				if (col < 8)
 80007be:	7d3b      	ldrb	r3, [r7, #20]
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d820      	bhi.n	8000806 <disp1color_DrawChar+0x106>
					disp1color_DrawPixel(X + col, Y + row,
 80007c4:	7d3b      	ldrb	r3, [r7, #20]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	4413      	add	r3, r2
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b218      	sxth	r0, r3
 80007d0:	7d7b      	ldrb	r3, [r7, #21]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b219      	sxth	r1, r3
							pCharTable[row * 2] & (1 << (7 - col)));
 80007dc:	7d7b      	ldrb	r3, [r7, #21]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	461a      	mov	r2, r3
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	7d3b      	ldrb	r3, [r7, #20]
 80007ec:	f1c3 0307 	rsb	r3, r3, #7
 80007f0:	2401      	movs	r4, #1
 80007f2:	fa04 f303 	lsl.w	r3, r4, r3
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	4013      	ands	r3, r2
 80007fa:	b25b      	sxtb	r3, r3
					disp1color_DrawPixel(X + col, Y + row,
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	f7ff ff20 	bl	8000644 <disp1color_DrawPixel>
 8000804:	e01f      	b.n	8000846 <disp1color_DrawChar+0x146>
				else
					disp1color_DrawPixel(X + col, Y + row,
 8000806:	7d3b      	ldrb	r3, [r7, #20]
 8000808:	b29a      	uxth	r2, r3
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	4413      	add	r3, r2
 800080e:	b29b      	uxth	r3, r3
 8000810:	b218      	sxth	r0, r3
 8000812:	7d7b      	ldrb	r3, [r7, #21]
 8000814:	b29a      	uxth	r2, r3
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	b29b      	uxth	r3, r3
 800081c:	b219      	sxth	r1, r3
							pCharTable[(row * 2) + 1] & (1 << (15 - col)));
 800081e:	7d7b      	ldrb	r3, [r7, #21]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	3301      	adds	r3, #1
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b25a      	sxtb	r2, r3
 800082c:	7d3b      	ldrb	r3, [r7, #20]
 800082e:	f1c3 030f 	rsb	r3, r3, #15
 8000832:	2401      	movs	r4, #1
 8000834:	fa04 f303 	lsl.w	r3, r4, r3
 8000838:	b25b      	sxtb	r3, r3
 800083a:	4013      	ands	r3, r2
 800083c:	b25b      	sxtb	r3, r3
					disp1color_DrawPixel(X + col, Y + row,
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	f7ff feff 	bl	8000644 <disp1color_DrawPixel>
			for (uint8_t col = 0; col < CharWidth; col++) {
 8000846:	7d3b      	ldrb	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	753b      	strb	r3, [r7, #20]
 800084c:	7d3a      	ldrb	r2, [r7, #20]
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3b4      	bcc.n	80007be <disp1color_DrawChar+0xbe>
		for (uint8_t row = 0; row < CharHeight; row++) {
 8000854:	7d7b      	ldrb	r3, [r7, #21]
 8000856:	3301      	adds	r3, #1
 8000858:	757b      	strb	r3, [r7, #21]
 800085a:	7d7a      	ldrb	r2, [r7, #21]
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3aa      	bcc.n	80007b8 <disp1color_DrawChar+0xb8>
			}
		}
	}
	return CharWidth;
 8000862:	7bfb      	ldrb	r3, [r7, #15]
}
 8000864:	4618      	mov	r0, r3
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <disp1color_DrawString>:
//==============================================================================

//==============================================================================
// Функция вывода текста из строки Str на дисплей
//==============================================================================
void disp1color_DrawString(int16_t X, int16_t Y, uint8_t FontID, uint8_t *Str) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4603      	mov	r3, r0
 8000876:	81fb      	strh	r3, [r7, #14]
 8000878:	460b      	mov	r3, r1
 800087a:	81bb      	strh	r3, [r7, #12]
 800087c:	4613      	mov	r3, r2
 800087e:	72fb      	strb	r3, [r7, #11]
	uint8_t done = 0;             // Флаг окончания вывода
 8000880:	2300      	movs	r3, #0
 8000882:	75fb      	strb	r3, [r7, #23]
	int16_t Xstart = X; // Запоминаем куда будем переводить каретку при переходе на новую строку
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	82bb      	strh	r3, [r7, #20]
	uint8_t StrHeight = 8; // Высота символов в пикселях для перехода на слежующую строку
 8000888:	2308      	movs	r3, #8
 800088a:	75bb      	strb	r3, [r7, #22]

	// Вывод строки
	while (!done) {
 800088c:	e037      	b.n	80008fe <disp1color_DrawString+0x92>
		switch (*Str) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b0d      	cmp	r3, #13
 8000894:	d010      	beq.n	80008b8 <disp1color_DrawString+0x4c>
 8000896:	2b0d      	cmp	r3, #13
 8000898:	dc11      	bgt.n	80008be <disp1color_DrawString+0x52>
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <disp1color_DrawString+0x38>
 800089e:	2b0a      	cmp	r3, #10
 80008a0:	d003      	beq.n	80008aa <disp1color_DrawString+0x3e>
 80008a2:	e00c      	b.n	80008be <disp1color_DrawString+0x52>
		case '\0':  // Конец строки
			done = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	75fb      	strb	r3, [r7, #23]
			break;
 80008a8:	e026      	b.n	80008f8 <disp1color_DrawString+0x8c>
		case '\n':  // Переход на следующую строку
			Y += StrHeight;
 80008aa:	7dbb      	ldrb	r3, [r7, #22]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	81bb      	strh	r3, [r7, #12]
			break;
 80008b6:	e01f      	b.n	80008f8 <disp1color_DrawString+0x8c>
		case '\r':  // Переход в начало строки
			X = Xstart;
 80008b8:	8abb      	ldrh	r3, [r7, #20]
 80008ba:	81fb      	strh	r3, [r7, #14]
			break;
 80008bc:	e01c      	b.n	80008f8 <disp1color_DrawString+0x8c>
		default:    // Отображаемый символ
			//printf("Symbol:%c\n", *Str);
			//printf("X=%d%s%d%s", X, " Y=", Y, "\n");
			X += disp1color_DrawChar(X, Y, FontID, *Str);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	7afa      	ldrb	r2, [r7, #11]
 80008c4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80008c8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80008cc:	f7ff ff18 	bl	8000700 <disp1color_DrawChar>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	81fb      	strh	r3, [r7, #14]
			///////
			//setlocale(LC_ALL, "ru_UA.UTF-8");
			// printf("BUF vert:\n");
			// print_buf(disp1color_buff, sizeof(disp1color_buff));
			///////
			StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f9a5 	bl	8000c34 <font_GetFontStruct>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9c3 	bl	8000c78 <font_GetCharHeight>
 80008f2:	4603      	mov	r3, r0
 80008f4:	75bb      	strb	r3, [r7, #22]
			break;
 80008f6:	bf00      	nop
		}
		Str++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
	while (!done) {
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0c4      	beq.n	800088e <disp1color_DrawString+0x22>
	}
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <DMD_1COLOR_DisplayFullUpdate>:
}

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	461a      	mov	r2, r3
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f817 	bl	8000954 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	461a      	mov	r2, r3
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	2001      	movs	r0, #1
 800092e:	f000 f811 	bl	8000954 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000932:	887b      	ldrh	r3, [r7, #2]
 8000934:	461a      	mov	r2, r3
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2002      	movs	r0, #2
 800093a:	f000 f80b 	bl	8000954 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	461a      	mov	r2, r3
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f805 	bl	8000954 <DMD_1COLOR_UpdateRow4>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <DMD_1COLOR_UpdateRow4>:
//==============================================================================

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	b2db      	uxtb	r3, r3
 800096c:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <DMD_1COLOR_UpdateRow4+0xd0>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000978:	2302      	movs	r3, #2
 800097a:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	83fb      	strh	r3, [r7, #30]
 8000980:	2300      	movs	r3, #0
 8000982:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++) {
 8000984:	2300      	movs	r3, #0
 8000986:	76fb      	strb	r3, [r7, #27]
 8000988:	e040      	b.n	8000a0c <DMD_1COLOR_UpdateRow4+0xb8>
		StartIdxCol = StartIdxRow;
 800098a:	8bfb      	ldrh	r3, [r7, #30]
 800098c:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++) {
 800098e:	2300      	movs	r3, #0
 8000990:	76bb      	strb	r3, [r7, #26]
 8000992:	e028      	b.n	80009e6 <DMD_1COLOR_UpdateRow4+0x92>
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <DMD_1COLOR_UpdateRow4+0xd4>)
 8000996:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8000998:	8bbb      	ldrh	r3, [r7, #28]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e015      	b.n	80009d2 <DMD_1COLOR_UpdateRow4+0x7e>
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 80009a6:	2220      	movs	r2, #32
 80009a8:	6939      	ldr	r1, [r7, #16]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f002 fdaa 	bl	8003504 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	491d      	ldr	r1, [pc, #116]	; (8000a28 <DMD_1COLOR_UpdateRow4+0xd4>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f839 	bl	8000a2c <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3320      	adds	r3, #32
 80009be:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <DMD_1COLOR_UpdateRow4+0xcc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4413      	add	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++) {
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	7a7b      	ldrb	r3, [r7, #9]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d3e5      	bcc.n	80009a6 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80009da:	8bbb      	ldrh	r3, [r7, #28]
 80009dc:	3320      	adds	r3, #32
 80009de:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++) {
 80009e0:	7ebb      	ldrb	r3, [r7, #26]
 80009e2:	3301      	adds	r3, #1
 80009e4:	76bb      	strb	r3, [r7, #26]
 80009e6:	7ebb      	ldrb	r3, [r7, #26]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	897a      	ldrh	r2, [r7, #10]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8d1      	bhi.n	8000994 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 80009f0:	7a7b      	ldrb	r3, [r7, #9]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <DMD_1COLOR_UpdateRow4+0xcc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	fb12 f303 	smulbb	r3, r2, r3
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	8bfb      	ldrh	r3, [r7, #30]
 8000a02:	4413      	add	r3, r2
 8000a04:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++) {
 8000a06:	7efb      	ldrb	r3, [r7, #27]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	76fb      	strb	r3, [r7, #27]
 8000a0c:	7efb      	ldrb	r3, [r7, #27]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	89ba      	ldrh	r2, [r7, #12]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d8b9      	bhi.n	800098a <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000001 	.word	0x20000001
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000234 	.word	0x20000234

08000a2c <DMD_1COLOR_SendFromMatrixBuff>:
//==============================================================================

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff) {
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t*) &(DMD_1COLOR_Buff[Row4][0]);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000a46:	4413      	add	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	74fb      	strb	r3, [r7, #19]
 8000a4e:	e035      	b.n	8000abc <DMD_1COLOR_SendFromMatrixBuff+0x90>
		for (uint8_t Row = MatrixRows8bit; Row; Row--) {
 8000a50:	7c7b      	ldrb	r3, [r7, #17]
 8000a52:	74bb      	strb	r3, [r7, #18]
 8000a54:	e02c      	b.n	8000ab0 <DMD_1COLOR_SendFromMatrixBuff+0x84>
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000a56:	7cbb      	ldrb	r3, [r7, #18]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	015b      	lsls	r3, r3, #5
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000a64:	7cfb      	ldrb	r3, [r7, #19]
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4),
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	3304      	adds	r3, #4
 8000a74:	2201      	movs	r2, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	697c      	ldr	r4, [r7, #20]
 8000a7e:	1c63      	adds	r3, r4, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	68f9      	ldr	r1, [r7, #12]
 8000a84:	4610      	mov	r0, r2
 8000a86:	f000 f825 	bl	8000ad4 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	7023      	strb	r3, [r4, #0]
					p8Bytes);
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2201      	movs	r2, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	697c      	ldr	r4, [r7, #20]
 8000a9a:	1c63      	adds	r3, r4, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	68f9      	ldr	r1, [r7, #12]
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f000 f817 	bl	8000ad4 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--) {
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	74bb      	strb	r3, [r7, #18]
 8000ab0:	7cbb      	ldrb	r3, [r7, #18]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1cf      	bne.n	8000a56 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++) {
 8000ab6:	7cfb      	ldrb	r3, [r7, #19]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	74fb      	strb	r3, [r7, #19]
 8000abc:	7cfa      	ldrb	r2, [r7, #19]
 8000abe:	7c3b      	ldrb	r3, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3c5      	bcc.n	8000a50 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000274 	.word	0x20000274

08000ad4 <DMD_1COLOR_GetFrom8ScreenBytes>:

//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++) {
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	73bb      	strb	r3, [r7, #14]
 8000ae8:	e010      	b.n	8000b0c <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
		if (*pBuff & Mask)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4013      	ands	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8000af8:	7bfa      	ldrb	r2, [r7, #15]
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++) {
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	085b      	lsrs	r3, r3, #1
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1eb      	bne.n	8000aea <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <prepare_data>:
//==============================================================================

//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	e042      	b.n	8000bba <prepare_data+0x92>
			i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
//	for (uint8_t i = 0; i < 4; i++) {
		//По столбцам
//		for (uint8_t k = 0; k < 16; k++) {
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	71bb      	strb	r3, [r7, #6]
 8000b38:	e039      	b.n	8000bae <prepare_data+0x86>
			if (i == 0) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8000b40:	79f9      	ldrb	r1, [r7, #7]
 8000b42:	79ba      	ldrb	r2, [r7, #6]
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <prepare_data+0xa8>)
 8000b48:	0109      	lsls	r1, r1, #4
 8000b4a:	4401      	add	r1, r0
 8000b4c:	440a      	add	r2, r1
 8000b4e:	7811      	ldrb	r1, [r2, #0]
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <prepare_data+0xac>)
 8000b52:	54d1      	strb	r1, [r2, r3]
 8000b54:	e028      	b.n	8000ba8 <prepare_data+0x80>
			} else if (i == 1) {
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10a      	bne.n	8000b72 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000b5c:	79f9      	ldrb	r1, [r7, #7]
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	481b      	ldr	r0, [pc, #108]	; (8000bd0 <prepare_data+0xa8>)
 8000b64:	0109      	lsls	r1, r1, #4
 8000b66:	4401      	add	r1, r0
 8000b68:	440a      	add	r2, r1
 8000b6a:	7811      	ldrb	r1, [r2, #0]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <prepare_data+0xb0>)
 8000b6e:	54d1      	strb	r1, [r2, r3]
 8000b70:	e01a      	b.n	8000ba8 <prepare_data+0x80>
			} else if (i == 2) {
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d10a      	bne.n	8000b8e <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000b78:	79f9      	ldrb	r1, [r7, #7]
 8000b7a:	79ba      	ldrb	r2, [r7, #6]
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <prepare_data+0xa8>)
 8000b80:	0109      	lsls	r1, r1, #4
 8000b82:	4401      	add	r1, r0
 8000b84:	440a      	add	r2, r1
 8000b86:	7811      	ldrb	r1, [r2, #0]
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <prepare_data+0xb4>)
 8000b8a:	54d1      	strb	r1, [r2, r3]
 8000b8c:	e00c      	b.n	8000ba8 <prepare_data+0x80>
			} else if (i == 3) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d109      	bne.n	8000ba8 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8000b94:	79f9      	ldrb	r1, [r7, #7]
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <prepare_data+0xa8>)
 8000b9c:	0109      	lsls	r1, r1, #4
 8000b9e:	4401      	add	r1, r0
 8000ba0:	440a      	add	r2, r1
 8000ba2:	7811      	ldrb	r1, [r2, #0]
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <prepare_data+0xb8>)
 8000ba6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71bb      	strb	r3, [r7, #6]
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d9c2      	bls.n	8000b3a <prepare_data+0x12>
			i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d9b9      	bls.n	8000b34 <prepare_data+0xc>
			}
		}
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000274 	.word	0x20000274
 8000bd4:	200002f4 	.word	0x200002f4
 8000bd8:	20000304 	.word	0x20000304
 8000bdc:	20000314 	.word	0x20000314
 8000be0:	20000324 	.word	0x20000324

08000be4 <f10x16f_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f10x16f_GetCharTable(uint8_t Char)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f10x16f_table[Char][0]);
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	4413      	add	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <f10x16f_GetCharTable+0x24>)
 8000bfa:	4413      	add	r3, r2
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	08003fb4 	.word	0x08003fb4

08000c0c <f6x8m_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f6x8m_GetCharTable(uint8_t Char)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f6x8m_table[Char][0]);
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <f6x8m_GetCharTable+0x24>)
 8000c22:	4413      	add	r3, r2
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	080061b4 	.word	0x080061b4

08000c34 <font_GetFontStruct>:

//==============================================================================
// Функция возвращает указатель на структуру, описывающую символ Char
//==============================================================================
uint8_t *font_GetFontStruct(uint8_t FontID, uint8_t Char)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
  return font_table_funcs[FontID](Char);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <font_GetFontStruct+0x28>)
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	79ba      	ldrb	r2, [r7, #6]
 8000c4e:	4610      	mov	r0, r2
 8000c50:	4798      	blx	r3
 8000c52:	4603      	mov	r3, r0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	08006bb4 	.word	0x08006bb4

08000c60 <font_GetCharWidth>:

//==============================================================================
// Функция возвращает ширину символа
//==============================================================================
uint8_t font_GetCharWidth(uint8_t *pCharTable)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  return *pCharTable;  // Ширина символа
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <font_GetCharHeight>:

//==============================================================================
// Функция возвращает высоту символа
//==============================================================================
uint8_t font_GetCharHeight(uint8_t *pCharTable)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  pCharTable++;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
  return *pCharTable;  // Высота символа
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a25      	ldr	r2, [pc, #148]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2109      	movs	r1, #9
 8000d06:	4820      	ldr	r0, [pc, #128]	; (8000d88 <MX_GPIO_Init+0xf0>)
 8000d08:	f001 f802 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2150      	movs	r1, #80	; 0x50
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <MX_GPIO_Init+0xf4>)
 8000d12:	f000 fffd 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d1c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <MX_GPIO_Init+0xf0>)
 8000d2e:	f000 fe2b 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000d32:	2309      	movs	r3, #9
 8000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <MX_GPIO_Init+0xf0>)
 8000d4a:	f000 fe1d 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 8000d4e:	2350      	movs	r3, #80	; 0x50
 8000d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_GPIO_Init+0xf4>)
 8000d66:	f000 fe0f 	bl	8001988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f000 fdd3 	bl	800191a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d74:	2028      	movs	r0, #40	; 0x28
 8000d76:	f000 fdec 	bl	8001952 <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3720      	adds	r7, #32
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <codeToLetter>:
const int numCodes = sizeof(morseCodes) / sizeof(morseCodes[0]);
char *dot = ".";
char *dash = "-";
char *space = " ";

char* codeToLetter(const char* code) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numCodes; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e013      	b.n	8000dc6 <codeToLetter+0x36>
        if (strcmp(morseCodes[i].code, code) == 0)
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <codeToLetter+0x48>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa20 	bl	80001f0 <strcmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d104      	bne.n	8000dc0 <codeToLetter+0x30>
            return &(morseCodes[i].letter);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <codeToLetter+0x48>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	e007      	b.n	8000dd0 <codeToLetter+0x40>
    for (int i = 0; i < numCodes; i++) {
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	2232      	movs	r2, #50	; 0x32
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	dbe7      	blt.n	8000d9e <codeToLetter+0xe>
    }
    return NULL;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000004 	.word	0x20000004

08000ddc <disp_row>:
extern volatile uint32_t LowTime;
extern volatile uint64_t TimeStamp;

uint16_t trash;

void disp_row(int row) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if (row == 0) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d120      	bne.n	8000e2c <disp_row+0x50>
		HAL_SPI_Transmit(&hspi1, data1, 16, 10);
 8000dea:	230a      	movs	r3, #10
 8000dec:	2210      	movs	r2, #16
 8000dee:	494a      	ldr	r1, [pc, #296]	; (8000f18 <disp_row+0x13c>)
 8000df0:	484a      	ldr	r0, [pc, #296]	; (8000f1c <disp_row+0x140>)
 8000df2:	f001 fcbc 	bl	800276e <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000df6:	bf00      	nop
 8000df8:	4848      	ldr	r0, [pc, #288]	; (8000f1c <disp_row+0x140>)
 8000dfa:	f001 fdf4 	bl	80029e6 <HAL_SPI_GetState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d1f9      	bne.n	8000df8 <disp_row+0x1c>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4845      	ldr	r0, [pc, #276]	; (8000f20 <disp_row+0x144>)
 8000e0a:	f000 ff81 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	4843      	ldr	r0, [pc, #268]	; (8000f20 <disp_row+0x144>)
 8000e14:	f000 ff7c 	bl	8001d10 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4841      	ldr	r0, [pc, #260]	; (8000f24 <disp_row+0x148>)
 8000e1e:	f000 ff77 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2108      	movs	r1, #8
 8000e26:	483f      	ldr	r0, [pc, #252]	; (8000f24 <disp_row+0x148>)
 8000e28:	f000 ff72 	bl	8001d10 <HAL_GPIO_WritePin>
	}
	if (row == 1) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d120      	bne.n	8000e74 <disp_row+0x98>
		HAL_SPI_Transmit(&hspi1, data2, 16, 10);
 8000e32:	230a      	movs	r3, #10
 8000e34:	2210      	movs	r2, #16
 8000e36:	493c      	ldr	r1, [pc, #240]	; (8000f28 <disp_row+0x14c>)
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <disp_row+0x140>)
 8000e3a:	f001 fc98 	bl	800276e <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000e3e:	bf00      	nop
 8000e40:	4836      	ldr	r0, [pc, #216]	; (8000f1c <disp_row+0x140>)
 8000e42:	f001 fdd0 	bl	80029e6 <HAL_SPI_GetState>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d1f9      	bne.n	8000e40 <disp_row+0x64>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	4833      	ldr	r0, [pc, #204]	; (8000f20 <disp_row+0x144>)
 8000e52:	f000 ff5d 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	4831      	ldr	r0, [pc, #196]	; (8000f20 <disp_row+0x144>)
 8000e5c:	f000 ff58 	bl	8001d10 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	482f      	ldr	r0, [pc, #188]	; (8000f24 <disp_row+0x148>)
 8000e66:	f000 ff53 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <disp_row+0x148>)
 8000e70:	f000 ff4e 	bl	8001d10 <HAL_GPIO_WritePin>
	}

	if (row == 2) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d120      	bne.n	8000ebc <disp_row+0xe0>
		HAL_SPI_Transmit(&hspi1, data3, 16, 10);
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	492b      	ldr	r1, [pc, #172]	; (8000f2c <disp_row+0x150>)
 8000e80:	4826      	ldr	r0, [pc, #152]	; (8000f1c <disp_row+0x140>)
 8000e82:	f001 fc74 	bl	800276e <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000e86:	bf00      	nop
 8000e88:	4824      	ldr	r0, [pc, #144]	; (8000f1c <disp_row+0x140>)
 8000e8a:	f001 fdac 	bl	80029e6 <HAL_SPI_GetState>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d1f9      	bne.n	8000e88 <disp_row+0xac>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	4821      	ldr	r0, [pc, #132]	; (8000f20 <disp_row+0x144>)
 8000e9a:	f000 ff39 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	481f      	ldr	r0, [pc, #124]	; (8000f20 <disp_row+0x144>)
 8000ea4:	f000 ff34 	bl	8001d10 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	481d      	ldr	r0, [pc, #116]	; (8000f24 <disp_row+0x148>)
 8000eae:	f000 ff2f 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <disp_row+0x148>)
 8000eb8:	f000 ff2a 	bl	8001d10 <HAL_GPIO_WritePin>
	}

	if (row == 3) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d120      	bne.n	8000f04 <disp_row+0x128>
		HAL_SPI_Transmit(&hspi1, data4, 16, 10);
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	491a      	ldr	r1, [pc, #104]	; (8000f30 <disp_row+0x154>)
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <disp_row+0x140>)
 8000eca:	f001 fc50 	bl	800276e <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ece:	bf00      	nop
 8000ed0:	4812      	ldr	r0, [pc, #72]	; (8000f1c <disp_row+0x140>)
 8000ed2:	f001 fd88 	bl	80029e6 <HAL_SPI_GetState>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1f9      	bne.n	8000ed0 <disp_row+0xf4>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	480f      	ldr	r0, [pc, #60]	; (8000f20 <disp_row+0x144>)
 8000ee2:	f000 ff15 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <disp_row+0x144>)
 8000eec:	f000 ff10 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <disp_row+0x148>)
 8000ef6:	f000 ff0b 	bl	8001d10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2108      	movs	r1, #8
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <disp_row+0x148>)
 8000f00:	f000 ff06 	bl	8001d10 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2110      	movs	r1, #16
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <disp_row+0x144>)
 8000f0a:	f000 ff01 	bl	8001d10 <HAL_GPIO_WritePin>
//	for (uint32_t x = 0; x <= 3000; x++) {
//	};
//	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);

//	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002f4 	.word	0x200002f4
 8000f1c:	200003a4 	.word	0x200003a4
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020800 	.word	0x40020800
 8000f28:	20000304 	.word	0x20000304
 8000f2c:	20000314 	.word	0x20000314
 8000f30:	20000324 	.word	0x20000324

08000f34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f3a:	f000 fba1 	bl	8001680 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f3e:	f000 f8bb 	bl	80010b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f42:	f7ff fea9 	bl	8000c98 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000f46:	f000 f9a7 	bl	8001298 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000f4a:	f000 fafd 	bl	8001548 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000f4e:	484d      	ldr	r0, [pc, #308]	; (8001084 <main+0x150>)
 8000f50:	f001 fe72 	bl	8002c38 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2110      	movs	r1, #16
 8000f58:	484b      	ldr	r0, [pc, #300]	; (8001088 <main+0x154>)
 8000f5a:	f000 fed9 	bl	8001d10 <HAL_GPIO_WritePin>
	char pMyStr[] = { 0xCF, 0xF0, 0xE8, 0xE2, 0xE5, 0xF2 };  //Строка на вывод
 8000f5e:	4a4b      	ldr	r2, [pc, #300]	; (800108c <main+0x158>)
 8000f60:	463b      	mov	r3, r7
 8000f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f66:	6018      	str	r0, [r3, #0]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	8019      	strh	r1, [r3, #0]

	uint8_t symbolDelay = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (Flag) {
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <main+0x15c>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d021      	beq.n	8000fbe <main+0x8a>
			if (HighTime >= 5 * TIME_REF) {
 8000f7a:	4b46      	ldr	r3, [pc, #280]	; (8001094 <main+0x160>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d963      	bls.n	800104e <main+0x11a>
				memset(CurrentCode, 0, strlen(CurrentCode));
 8000f86:	4844      	ldr	r0, [pc, #272]	; (8001098 <main+0x164>)
 8000f88:	f7ff f93c 	bl	8000204 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2100      	movs	r1, #0
 8000f92:	4841      	ldr	r0, [pc, #260]	; (8001098 <main+0x164>)
 8000f94:	f002 fac4 	bl	8003520 <memset>
				if (HighTime >= 7 * TIME_REF) {
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <main+0x160>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d954      	bls.n	800104e <main+0x11a>
					memset(Text, 0, strlen(Text));
 8000fa4:	483d      	ldr	r0, [pc, #244]	; (800109c <main+0x168>)
 8000fa6:	f7ff f92d 	bl	8000204 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	483a      	ldr	r0, [pc, #232]	; (800109c <main+0x168>)
 8000fb2:	f002 fab5 	bl	8003520 <memset>
					IsNewWord = 1;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <main+0x16c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	801a      	strh	r2, [r3, #0]
 8000fbc:	e047      	b.n	800104e <main+0x11a>
				}
			}
		} else {
			if (!IsNewLetter) {
 8000fbe:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <main+0x170>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d123      	bne.n	800100e <main+0xda>
				if ((LowTime > 3 * TIME_REF) && (clicktime < 7 * TIME_REF)) {
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <main+0x174>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d91d      	bls.n	800100e <main+0xda>
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <main+0x178>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d817      	bhi.n	800100e <main+0xda>
					letter = codeToLetter(CurrentCode);
 8000fde:	482e      	ldr	r0, [pc, #184]	; (8001098 <main+0x164>)
 8000fe0:	f7ff fed6 	bl	8000d90 <codeToLetter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <main+0x17c>)
 8000fe8:	6013      	str	r3, [r2, #0]
					strcat(Text, letter);
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <main+0x17c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482a      	ldr	r0, [pc, #168]	; (800109c <main+0x168>)
 8000ff2:	f002 fa9d 	bl	8003530 <strcat>
					memset(CurrentCode, 0, strlen(CurrentCode));
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <main+0x164>)
 8000ff8:	f7ff f904 	bl	8000204 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	4825      	ldr	r0, [pc, #148]	; (8001098 <main+0x164>)
 8001004:	f002 fa8c 	bl	8003520 <memset>
					IsNewLetter = 1;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <main+0x170>)
 800100a:	2201      	movs	r2, #1
 800100c:	801a      	strh	r2, [r3, #0]
				}

			}
			if (IsNewLetter && !IsNewWord && (LowTime >= 7 * TIME_REF)) {
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <main+0x170>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01b      	beq.n	800104e <main+0x11a>
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <main+0x16c>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d117      	bne.n	800104e <main+0x11a>
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <main+0x174>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001026:	4293      	cmp	r3, r2
 8001028:	d911      	bls.n	800104e <main+0x11a>
				memset(CurrentCode, 0, strlen(CurrentCode));
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <main+0x164>)
 800102c:	f7ff f8ea 	bl	8000204 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	2100      	movs	r1, #0
 8001036:	4818      	ldr	r0, [pc, #96]	; (8001098 <main+0x164>)
 8001038:	f002 fa72 	bl	8003520 <memset>
				strcat(Text, space);
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <main+0x180>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <main+0x168>)
 8001044:	f002 fa74 	bl	8003530 <strcat>
				IsNewWord = 1;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <main+0x16c>)
 800104a:	2201      	movs	r2, #1
 800104c:	801a      	strh	r2, [r3, #0]

			}

		}
		disp1color_FillScreenbuff(0);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fab8 	bl	80005c4 <disp1color_FillScreenbuff>
		disp1color_printf(2, 4, FONTID_6X8M, Text); //Расчет данных для вывода
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <main+0x168>)
 8001056:	2200      	movs	r2, #0
 8001058:	2104      	movs	r1, #4
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff face 	bl	80005fc <disp1color_printf>
		disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 8001060:	f7ff fac2 	bl	80005e8 <disp1color_UpdateFromBuff>
		prepare_data(); //Разбиение массива на массивы под каждую строку
 8001064:	f7ff fd60 	bl	8000b28 <prepare_data>
		disp_row(0);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff feb7 	bl	8000ddc <disp_row>
		disp_row(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff feb4 	bl	8000ddc <disp_row>
		disp_row(2);
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff feb1 	bl	8000ddc <disp_row>
		disp_row(3);
 800107a:	2003      	movs	r0, #3
 800107c:	f7ff feae 	bl	8000ddc <disp_row>
		if (Flag) {
 8001080:	e776      	b.n	8000f70 <main+0x3c>
 8001082:	bf00      	nop
 8001084:	20000418 	.word	0x20000418
 8001088:	40020000 	.word	0x40020000
 800108c:	08003fac 	.word	0x08003fac
 8001090:	200003fc 	.word	0x200003fc
 8001094:	20000400 	.word	0x20000400
 8001098:	20000334 	.word	0x20000334
 800109c:	20000368 	.word	0x20000368
 80010a0:	200001a2 	.word	0x200001a2
 80010a4:	200001a0 	.word	0x200001a0
 80010a8:	20000404 	.word	0x20000404
 80010ac:	200003a0 	.word	0x200003a0
 80010b0:	2000039c 	.word	0x2000039c
 80010b4:	2000019c 	.word	0x2000019c

080010b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fa2a 	bl	8003520 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <SystemClock_Config+0xd8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <SystemClock_Config+0xd8>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <SystemClock_Config+0xd8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <SystemClock_Config+0xdc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <SystemClock_Config+0xdc>)
 8001102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <SystemClock_Config+0xdc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	2301      	movs	r3, #1
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111c:	2310      	movs	r3, #16
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001124:	2300      	movs	r3, #0
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800112c:	23b4      	movs	r3, #180	; 0xb4
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001134:	2304      	movs	r3, #4
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fe69 	bl	8001e14 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x94>
		Error_Handler();
 8001148:	f000 f8a0 	bl	800128c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800114c:	f000 fe12 	bl	8001d74 <HAL_PWREx_EnableOverDrive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xa2>
		Error_Handler();
 8001156:	f000 f899 	bl	800128c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001166:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800116a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2105      	movs	r1, #5
 8001178:	4618      	mov	r0, r3
 800117a:	f001 f8c3 	bl	8002304 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xd0>
		Error_Handler();
 8001184:	f000 f882 	bl	800128c <Error_Handler>
	}
}
 8001188:	bf00      	nop
 800118a:	3750      	adds	r7, #80	; 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { //EXTI interrupt callback
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) { // check interrupt for specific pin
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a8:	d157      	bne.n	800125a <HAL_GPIO_EXTI_Callback+0xc2>
		clicktime = HAL_GetTick() - TimeStamp;
 80011aa:	f000 facf 	bl	800174c <HAL_GetTick>
 80011ae:	4601      	mov	r1, r0
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	4613      	mov	r3, r2
 80011b8:	1acb      	subs	r3, r1, r3
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011bc:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) { //check pin state
 80011be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c2:	482a      	ldr	r0, [pc, #168]	; (800126c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011c4:	f000 fd8c 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_GPIO_EXTI_Callback+0x3c>
			Flag = 1; // Pin is pulled up, so state is reversed
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_GPIO_EXTI_Callback+0xd8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	801a      	strh	r2, [r3, #0]
		}

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011da:	f000 fd81 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <HAL_GPIO_EXTI_Callback+0x52>
			Flag = 0;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_GPIO_EXTI_Callback+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
		}
		IsNewWord = 0;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	801a      	strh	r2, [r3, #0]
		IsNewLetter = 0;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_GPIO_EXTI_Callback+0xe0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	801a      	strh	r2, [r3, #0]
		if (!Flag) {
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_GPIO_EXTI_Callback+0xd8>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0xb0>
			LowTime = 0;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
			if ((clicktime >= DEBOUNCE) && (clicktime <= TIME_REF)) {
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d90b      	bls.n	8001226 <HAL_GPIO_EXTI_Callback+0x8e>
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001216:	d806      	bhi.n	8001226 <HAL_GPIO_EXTI_Callback+0x8e>
				strcat(CurrentCode, dot);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_GPIO_EXTI_Callback+0xe8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4819      	ldr	r0, [pc, #100]	; (8001284 <HAL_GPIO_EXTI_Callback+0xec>)
 8001220:	f002 f986 	bl	8003530 <strcat>
 8001224:	e010      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0xb0>
			} else if ((clicktime >= TIME_REF) && (clicktime <= 3 * TIME_REF)) {
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800122e:	d30b      	bcc.n	8001248 <HAL_GPIO_EXTI_Callback+0xb0>
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001238:	4293      	cmp	r3, r2
 800123a:	d805      	bhi.n	8001248 <HAL_GPIO_EXTI_Callback+0xb0>
				strcat(CurrentCode, dash);
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_GPIO_EXTI_Callback+0xf0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <HAL_GPIO_EXTI_Callback+0xec>)
 8001244:	f002 f974 	bl	8003530 <strcat>

			}
		}
		TimeStamp = HAL_GetTick();
 8001248:	f000 fa80 	bl	800174c <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	2200      	movs	r2, #0
 8001250:	461c      	mov	r4, r3
 8001252:	4615      	mov	r5, r2
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001256:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	20000408 	.word	0x20000408
 8001268:	200003a0 	.word	0x200003a0
 800126c:	40020800 	.word	0x40020800
 8001270:	200003fc 	.word	0x200003fc
 8001274:	200001a2 	.word	0x200001a2
 8001278:	200001a0 	.word	0x200001a0
 800127c:	20000404 	.word	0x20000404
 8001280:	20000194 	.word	0x20000194
 8001284:	20000334 	.word	0x20000334
 8001288:	20000198 	.word	0x20000198

0800128c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_SPI1_Init+0x64>)
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <MX_SPI1_Init+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_SPI1_Init+0x64>)
 80012a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_SPI1_Init+0x64>)
 80012c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_SPI1_Init+0x64>)
 80012cc:	2238      	movs	r2, #56	; 0x38
 80012ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_SPI1_Init+0x64>)
 80012e4:	220a      	movs	r2, #10
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_SPI1_Init+0x64>)
 80012ea:	f001 f9b7 	bl	800265c <HAL_SPI_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012f4:	f7ff ffca 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200003a4 	.word	0x200003a4
 8001300:	40013000 	.word	0x40013000

08001304 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_SPI_MspInit+0x84>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12b      	bne.n	800137e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_SPI_MspInit+0x88>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_SPI_MspInit+0x88>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800135e:	23a0      	movs	r3, #160	; 0xa0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136e:	2305      	movs	r3, #5
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_SPI_MspInit+0x8c>)
 800137a:	f000 fb05 	bl	8001988 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40013000 	.word	0x40013000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f978 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (Flag) {
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <TIM2_IRQHandler+0x44>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <TIM2_IRQHandler+0x24>
		HighTime = HAL_GetTick() - TimeStamp;
 8001446:	f000 f981 	bl	800174c <HAL_GetTick>
 800144a:	4601      	mov	r1, r0
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <TIM2_IRQHandler+0x48>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	4613      	mov	r3, r2
 8001454:	1acb      	subs	r3, r1, r3
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <TIM2_IRQHandler+0x4c>)
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e009      	b.n	8001470 <TIM2_IRQHandler+0x38>
	} else {
		LowTime = HAL_GetTick() - TimeStamp;
 800145c:	f000 f976 	bl	800174c <HAL_GetTick>
 8001460:	4601      	mov	r1, r0
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <TIM2_IRQHandler+0x48>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	4613      	mov	r3, r2
 800146a:	1acb      	subs	r3, r1, r3
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <TIM2_IRQHandler+0x50>)
 800146e:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <TIM2_IRQHandler+0x54>)
 8001472:	f001 fc51 	bl	8002d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003fc 	.word	0x200003fc
 8001480:	20000408 	.word	0x20000408
 8001484:	20000400 	.word	0x20000400
 8001488:	20000404 	.word	0x20000404
 800148c:	20000418 	.word	0x20000418

08001490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	flag = !flag;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <EXTI15_10_IRQHandler+0x24>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <EXTI15_10_IRQHandler+0x24>)
 80014a6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014ac:	f000 fc4a 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000410 	.word	0x20000410

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f001 ffe2 	bl	80034b0 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20030000 	.word	0x20030000
 8001518:	00000400 	.word	0x00000400
 800151c:	20000414 	.word	0x20000414
 8001520:	20000478 	.word	0x20000478

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM2_Init+0x94>)
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_TIM2_Init+0x94>)
 800156e:	22b3      	movs	r2, #179	; 0xb3
 8001570:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM2_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_TIM2_Init+0x94>)
 800157a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800157e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_TIM2_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_TIM2_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_TIM2_Init+0x94>)
 800158e:	f001 fb03 	bl	8002b98 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001598:	f7ff fe78 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_TIM2_Init+0x94>)
 80015aa:	f001 fcbd 	bl	8002f28 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b4:	f7ff fe6a 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_TIM2_Init+0x94>)
 80015c6:	f001 fee3 	bl	8003390 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f7ff fe5c 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000418 	.word	0x20000418

080015e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d115      	bne.n	800161e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_TIM_Base_MspInit+0x48>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_TIM_Base_MspInit+0x48>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_TIM_Base_MspInit+0x48>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	201c      	movs	r0, #28
 8001614:	f000 f981 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001618:	201c      	movs	r0, #28
 800161a:	f000 f99a 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff ff65 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f001 ff2f 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fc69 	bl	8000f34 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001664:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001670:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 8001674:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001678:	20000474 	.word	0x20000474

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f92b 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fe6e 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f943 	bl	800196e <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f90b 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200001a4 	.word	0x200001a4
 800171c:	200001ac 	.word	0x200001ac
 8001720:	200001a8 	.word	0x200001a8

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200001ac 	.word	0x200001ac
 8001748:	20000460 	.word	0x20000460

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000460 	.word	0x20000460

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff8e 	bl	8001858 <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e177      	b.n	8001c94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8166 	bne.w	8001c8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80c0 	beq.w	8001c8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a61      	ldr	r2, [pc, #388]	; (8001cb0 <HAL_GPIO_Init+0x328>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_GPIO_Init+0x32c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d037      	beq.n	8001bc6 <HAL_GPIO_Init+0x23e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_GPIO_Init+0x330>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d031      	beq.n	8001bc2 <HAL_GPIO_Init+0x23a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a56      	ldr	r2, [pc, #344]	; (8001cbc <HAL_GPIO_Init+0x334>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02b      	beq.n	8001bbe <HAL_GPIO_Init+0x236>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <HAL_GPIO_Init+0x338>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d025      	beq.n	8001bba <HAL_GPIO_Init+0x232>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_GPIO_Init+0x33c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01f      	beq.n	8001bb6 <HAL_GPIO_Init+0x22e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_GPIO_Init+0x340>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x22a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x344>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x226>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_GPIO_Init+0x348>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x222>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_GPIO_Init+0x34c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x21e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_GPIO_Init+0x350>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x21a>
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	e012      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	e010      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	e00e      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bae:	2306      	movs	r3, #6
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	; (8001cb0 <HAL_GPIO_Init+0x328>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae84 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021c00 	.word	0x40021c00
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e001      	b.n	8001d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fa18 	bl	8001198 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff fcd4 	bl	800174c <HAL_GetTick>
 8001da4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001da6:	e009      	b.n	8001dbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001da8:	f7ff fcd0 	bl	800174c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db6:	d901      	bls.n	8001dbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e01f      	b.n	8001dfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d1ee      	bne.n	8001da8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7ff fcbc 	bl	800174c <HAL_GetTick>
 8001dd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd6:	e009      	b.n	8001dec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcb8 	bl	800174c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de6:	d901      	bls.n	8001dec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e007      	b.n	8001dfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	420e0040 	.word	0x420e0040
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	420e0044 	.word	0x420e0044

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e267      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d075      	beq.n	8001f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d00c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d112      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b82      	ldr	r3, [pc, #520]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b7e      	ldr	r3, [pc, #504]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x108>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d157      	bne.n	8001f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e242      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x74>
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a75      	ldr	r2, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xb0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x98>
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6f      	ldr	r2, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6c      	ldr	r2, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xb0>
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a65      	ldr	r2, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fc3e 	bl	800174c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff fc3a 	bl	800174c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e207      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xc0>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc2a 	bl	800174c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fc26 	bl	800174c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1f3      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b51      	ldr	r3, [pc, #324]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0xe8>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d063      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d11c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x152>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1c7      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4937      	ldr	r1, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	e03a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCC_OscConfig+0x244>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fbdf 	bl	800174c <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff fbdb 	bl	800174c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1a8      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4925      	ldr	r1, [pc, #148]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_OscConfig+0x244>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fbbe 	bl	800174c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fbba 	bl	800174c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e187      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d036      	beq.n	800206c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_RCC_OscConfig+0x248>)
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff fb9e 	bl	800174c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff fb9a 	bl	800174c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e167      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x240>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x200>
 8002032:	e01b      	b.n	800206c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_OscConfig+0x248>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fb87 	bl	800174c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	e00e      	b.n	8002060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002042:	f7ff fb83 	bl	800174c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d907      	bls.n	8002060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e150      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
 8002054:	40023800 	.word	0x40023800
 8002058:	42470000 	.word	0x42470000
 800205c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	4b88      	ldr	r3, [pc, #544]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ea      	bne.n	8002042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8097 	beq.w	80021a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b81      	ldr	r3, [pc, #516]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b7d      	ldr	r3, [pc, #500]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a7c      	ldr	r2, [pc, #496]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b7a      	ldr	r3, [pc, #488]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b77      	ldr	r3, [pc, #476]	; (8002288 <HAL_RCC_OscConfig+0x474>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b74      	ldr	r3, [pc, #464]	; (8002288 <HAL_RCC_OscConfig+0x474>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a73      	ldr	r2, [pc, #460]	; (8002288 <HAL_RCC_OscConfig+0x474>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fb43 	bl	800174c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7ff fb3f 	bl	800174c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e10c      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x474>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x2ea>
 80020f0:	4b64      	ldr	r3, [pc, #400]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a63      	ldr	r2, [pc, #396]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
 80020fc:	e01c      	b.n	8002138 <HAL_RCC_OscConfig+0x324>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x30c>
 8002106:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a5e      	ldr	r2, [pc, #376]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a5b      	ldr	r2, [pc, #364]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0x324>
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a54      	ldr	r2, [pc, #336]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002132:	f023 0304 	bic.w	r3, r3, #4
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7ff fb04 	bl	800174c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff fb00 	bl	800174c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0cb      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0ee      	beq.n	8002148 <HAL_RCC_OscConfig+0x334>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7ff faee 	bl	800174c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7ff faea 	bl	800174c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0b5      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ee      	bne.n	8002174 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	4a38      	ldr	r2, [pc, #224]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a1 	beq.w	80022f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b2:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d05c      	beq.n	8002278 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d141      	bne.n	800224a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCC_OscConfig+0x478>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fabe 	bl	800174c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff faba 	bl	800174c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e087      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	491b      	ldr	r1, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x478>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fa93 	bl	800174c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fa8f 	bl	800174c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e05c      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x416>
 8002248:	e054      	b.n	80022f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x478>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fa7c 	bl	800174c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff fa78 	bl	800174c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e045      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x470>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x444>
 8002276:	e03d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e038      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000
 800228c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x4ec>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d028      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d121      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d11a      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d111      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
 80022da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0cc      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d90c      	bls.n	8002340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800237a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d044      	beq.n	8002424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d119      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e067      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4934      	ldr	r1, [pc, #208]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7ff f9aa 	bl	800174c <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7ff f9a6 	bl	800174c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d20c      	bcs.n	800244c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f90a 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08006bbc 	.word	0x08006bbc
 80024c8:	200001a4 	.word	0x200001a4
 80024cc:	200001a8 	.word	0x200001a8

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b090      	sub	sp, #64	; 0x40
 80024d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
 80024dc:	2300      	movs	r3, #0
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d00d      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x40>
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	f200 80a1 	bhi.w	800263c <HAL_RCC_GetSysClockFreq+0x16c>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x34>
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x3a>
 8002502:	e09b      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_GetSysClockFreq+0x184>)
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002508:	e09b      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_GetSysClockFreq+0x188>)
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800250e:	e098      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251a:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d028      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	2200      	movs	r2, #0
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	627a      	str	r2, [r7, #36]	; 0x24
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002538:	2100      	movs	r1, #0
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_GetSysClockFreq+0x188>)
 800253c:	fb03 f201 	mul.w	r2, r3, r1
 8002540:	2300      	movs	r3, #0
 8002542:	fb00 f303 	mul.w	r3, r0, r3
 8002546:	4413      	add	r3, r2
 8002548:	4a43      	ldr	r2, [pc, #268]	; (8002658 <HAL_RCC_GetSysClockFreq+0x188>)
 800254a:	fba0 1202 	umull	r1, r2, r0, r2
 800254e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002550:	460a      	mov	r2, r1
 8002552:	62ba      	str	r2, [r7, #40]	; 0x28
 8002554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002556:	4413      	add	r3, r2
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	2200      	movs	r2, #0
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	61fa      	str	r2, [r7, #28]
 8002562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800256a:	f7fd fea9 	bl	80002c0 <__aeabi_uldivmod>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4613      	mov	r3, r2
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002576:	e053      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	2200      	movs	r2, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	617a      	str	r2, [r7, #20]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800258a:	f04f 0b00 	mov.w	fp, #0
 800258e:	4652      	mov	r2, sl
 8002590:	465b      	mov	r3, fp
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	0159      	lsls	r1, r3, #5
 800259c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a0:	0150      	lsls	r0, r2, #5
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	ebb2 080a 	subs.w	r8, r2, sl
 80025aa:	eb63 090b 	sbc.w	r9, r3, fp
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025c2:	ebb2 0408 	subs.w	r4, r2, r8
 80025c6:	eb63 0509 	sbc.w	r5, r3, r9
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	00eb      	lsls	r3, r5, #3
 80025d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d8:	00e2      	lsls	r2, r4, #3
 80025da:	4614      	mov	r4, r2
 80025dc:	461d      	mov	r5, r3
 80025de:	eb14 030a 	adds.w	r3, r4, sl
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	eb45 030b 	adc.w	r3, r5, fp
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f6:	4629      	mov	r1, r5
 80025f8:	028b      	lsls	r3, r1, #10
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002600:	4621      	mov	r1, r4
 8002602:	028a      	lsls	r2, r1, #10
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	2200      	movs	r2, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002614:	f7fd fe54 	bl	80002c0 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetSysClockFreq+0x184>)
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002644:	4618      	mov	r0, r3
 8002646:	3740      	adds	r7, #64	; 0x40
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400
 8002658:	017d7840 	.word	0x017d7840

0800265c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07b      	b.n	8002766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800267e:	d009      	beq.n	8002694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
 8002686:	e005      	b.n	8002694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fe28 	bl	8001304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	ea42 0103 	orr.w	r1, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0104 	and.w	r1, r3, #4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f003 0210 	and.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_SPI_Transmit+0x22>
 800278c:	2302      	movs	r3, #2
 800278e:	e126      	b.n	80029de <HAL_SPI_Transmit+0x270>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002798:	f7fe ffd8 	bl	800174c <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027b2:	e10b      	b.n	80029cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x52>
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027c4:	e102      	b.n	80029cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280c:	d10f      	bne.n	800282e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d007      	beq.n	800284c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002854:	d14b      	bne.n	80028ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Transmit+0xf6>
 800285e:	8afb      	ldrh	r3, [r7, #22]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d13e      	bne.n	80028e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	1c9a      	adds	r2, r3, #2
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002888:	e02b      	b.n	80028e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b02      	cmp	r3, #2
 8002896:	d112      	bne.n	80028be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80028bc:	e011      	b.n	80028e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028be:	f7fe ff45 	bl	800174c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d803      	bhi.n	80028d6 <HAL_SPI_Transmit+0x168>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_Transmit+0x16e>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028e0:	e074      	b.n	80029cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ce      	bne.n	800288a <HAL_SPI_Transmit+0x11c>
 80028ec:	e04c      	b.n	8002988 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Transmit+0x18e>
 80028f6:	8afb      	ldrh	r3, [r7, #22]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d140      	bne.n	800297e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002922:	e02c      	b.n	800297e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d113      	bne.n	800295a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	86da      	strh	r2, [r3, #54]	; 0x36
 8002958:	e011      	b.n	800297e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295a:	f7fe fef7 	bl	800174c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d803      	bhi.n	8002972 <HAL_SPI_Transmit+0x204>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d102      	bne.n	8002978 <HAL_SPI_Transmit+0x20a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800297c:	e026      	b.n	80029cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1cd      	bne.n	8002924 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f8c1 	bl	8002b14 <SPI_EndRxTxTransaction>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e000      	b.n	80029cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80029ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f4:	b2db      	uxtb	r3, r3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a14:	f7fe fe9a 	bl	800174c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a24:	f7fe fe92 	bl	800174c <HAL_GetTick>
 8002a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	015b      	lsls	r3, r3, #5
 8002a30:	0d1b      	lsrs	r3, r3, #20
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a3a:	e054      	b.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d050      	beq.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a44:	f7fe fe82 	bl	800174c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d902      	bls.n	8002a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d13d      	bne.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a72:	d111      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7c:	d004      	beq.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d107      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa0:	d10f      	bne.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e017      	b.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d19b      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200001a4 	.word	0x200001a4

08002b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <SPI_EndRxTxTransaction+0x7c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <SPI_EndRxTxTransaction+0x80>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0d5b      	lsrs	r3, r3, #21
 8002b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3e:	d112      	bne.n	8002b66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff ff5a 	bl	8002a04 <SPI_WaitFlagStateUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e00f      	b.n	8002b86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d0f2      	beq.n	8002b66 <SPI_EndRxTxTransaction+0x52>
 8002b80:	e000      	b.n	8002b84 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b82:	bf00      	nop
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200001a4 	.word	0x200001a4
 8002b94:	165e9f81 	.word	0x165e9f81

08002b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e041      	b.n	8002c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fd0e 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f000 faa0 	bl	800311c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04e      	b.n	8002cee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d022      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d01d      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d018      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x80>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d010      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	e007      	b.n	8002cec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40000c00 	.word	0x40000c00
 8002d0c:	40010400 	.word	0x40010400
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40001800 	.word	0x40001800

08002d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0202 	mvn.w	r2, #2
 8002d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f9bf 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9b1 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f9c2 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0204 	mvn.w	r2, #4
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f995 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f987 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f998 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0208 	mvn.w	r2, #8
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2204      	movs	r2, #4
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f96b 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f95d 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f96e 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0210 	mvn.w	r2, #16
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2208      	movs	r2, #8
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f941 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f933 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f944 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0201 	mvn.w	r2, #1
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f90d 	bl	80030b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b80      	cmp	r3, #128	; 0x80
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 faea 	bl	800349c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f909 	bl	8003106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0220 	mvn.w	r2, #32
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fab4 	bl	8003488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_TIM_ConfigClockSource+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0b4      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x186>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d03e      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0xd4>
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	f200 8087 	bhi.w	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	f000 8086 	beq.w	800309a <HAL_TIM_ConfigClockSource+0x172>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d87f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b70      	cmp	r3, #112	; 0x70
 8002f96:	d01a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xa6>
 8002f98:	2b70      	cmp	r3, #112	; 0x70
 8002f9a:	d87b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b60      	cmp	r3, #96	; 0x60
 8002f9e:	d050      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x11a>
 8002fa0:	2b60      	cmp	r3, #96	; 0x60
 8002fa2:	d877      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b50      	cmp	r3, #80	; 0x50
 8002fa6:	d03c      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xfa>
 8002fa8:	2b50      	cmp	r3, #80	; 0x50
 8002faa:	d873      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d058      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x13a>
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d86f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb4:	2b30      	cmp	r3, #48	; 0x30
 8002fb6:	d064      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb8:	2b30      	cmp	r3, #48	; 0x30
 8002fba:	d86b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d060      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d867      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05c      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d05a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fcc:	e062      	b.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f000 f9b7 	bl	8003350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]
      break;
 8002ffa:	e04f      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f000 f9a0 	bl	8003350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800301e:	609a      	str	r2, [r3, #8]
      break;
 8003020:	e03c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	f000 f914 	bl	800325c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2150      	movs	r1, #80	; 0x50
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f96d 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003040:	e02c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f000 f933 	bl	80032ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2160      	movs	r1, #96	; 0x60
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f95d 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003060:	e01c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	f000 f8f4 	bl	800325c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f94d 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003080:	e00c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 f944 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003092:	e003      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e000      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800309a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d00f      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <TIM_Base_SetConfig+0x118>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <TIM_Base_SetConfig+0x11c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3b      	ldr	r2, [pc, #236]	; (800323c <TIM_Base_SetConfig+0x120>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <TIM_Base_SetConfig+0x124>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d027      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <TIM_Base_SetConfig+0x118>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d023      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <TIM_Base_SetConfig+0x11c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01f      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <TIM_Base_SetConfig+0x120>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01b      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <TIM_Base_SetConfig+0x124>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d017      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a28      	ldr	r2, [pc, #160]	; (8003244 <TIM_Base_SetConfig+0x128>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <TIM_Base_SetConfig+0x12c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00f      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <TIM_Base_SetConfig+0x130>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <TIM_Base_SetConfig+0x134>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <TIM_Base_SetConfig+0x138>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a23      	ldr	r2, [pc, #140]	; (8003258 <TIM_Base_SetConfig+0x13c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0xf8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <TIM_Base_SetConfig+0x124>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40010400 	.word	0x40010400
 8003244:	40014000 	.word	0x40014000
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800
 8003250:	40001800 	.word	0x40001800
 8003254:	40001c00 	.word	0x40001c00
 8003258:	40002000 	.word	0x40002000

0800325c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 030a 	bic.w	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b087      	sub	sp, #28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0210 	bic.w	r2, r3, #16
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	031b      	lsls	r3, r3, #12
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	f043 0307 	orr.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	021a      	lsls	r2, r3, #8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	431a      	orrs	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e05a      	b.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d01d      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10c      	bne.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	4313      	orrs	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800
 8003478:	40000c00 	.word	0x40000c00
 800347c:	40010400 	.word	0x40010400
 8003480:	40014000 	.word	0x40014000
 8003484:	40001800 	.word	0x40001800

08003488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <__errno>:
 80034b0:	4b01      	ldr	r3, [pc, #4]	; (80034b8 <__errno+0x8>)
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	200001b0 	.word	0x200001b0

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	; (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	; (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	; (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	; (8003500 <__libc_init_array+0x44>)
 80034d0:	f000 fcb6 	bl	8003e40 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	08006c68 	.word	0x08006c68
 80034f8:	08006c68 	.word	0x08006c68
 80034fc:	08006c68 	.word	0x08006c68
 8003500:	08006c6c 	.word	0x08006c6c

08003504 <memcpy>:
 8003504:	440a      	add	r2, r1
 8003506:	4291      	cmp	r1, r2
 8003508:	f100 33ff 	add.w	r3, r0, #4294967295
 800350c:	d100      	bne.n	8003510 <memcpy+0xc>
 800350e:	4770      	bx	lr
 8003510:	b510      	push	{r4, lr}
 8003512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800351a:	4291      	cmp	r1, r2
 800351c:	d1f9      	bne.n	8003512 <memcpy+0xe>
 800351e:	bd10      	pop	{r4, pc}

08003520 <memset>:
 8003520:	4402      	add	r2, r0
 8003522:	4603      	mov	r3, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <strcat>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4602      	mov	r2, r0
 8003534:	7814      	ldrb	r4, [r2, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	3201      	adds	r2, #1
 800353a:	2c00      	cmp	r4, #0
 800353c:	d1fa      	bne.n	8003534 <strcat+0x4>
 800353e:	3b01      	subs	r3, #1
 8003540:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003544:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003548:	2a00      	cmp	r2, #0
 800354a:	d1f9      	bne.n	8003540 <strcat+0x10>
 800354c:	bd10      	pop	{r4, pc}

0800354e <_vsniprintf_r>:
 800354e:	b530      	push	{r4, r5, lr}
 8003550:	4614      	mov	r4, r2
 8003552:	2c00      	cmp	r4, #0
 8003554:	b09b      	sub	sp, #108	; 0x6c
 8003556:	4605      	mov	r5, r0
 8003558:	461a      	mov	r2, r3
 800355a:	da05      	bge.n	8003568 <_vsniprintf_r+0x1a>
 800355c:	238b      	movs	r3, #139	; 0x8b
 800355e:	6003      	str	r3, [r0, #0]
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	b01b      	add	sp, #108	; 0x6c
 8003566:	bd30      	pop	{r4, r5, pc}
 8003568:	f44f 7302 	mov.w	r3, #520	; 0x208
 800356c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003570:	bf14      	ite	ne
 8003572:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003576:	4623      	moveq	r3, r4
 8003578:	9302      	str	r3, [sp, #8]
 800357a:	9305      	str	r3, [sp, #20]
 800357c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003580:	9100      	str	r1, [sp, #0]
 8003582:	9104      	str	r1, [sp, #16]
 8003584:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003588:	4669      	mov	r1, sp
 800358a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800358c:	f000 f90a 	bl	80037a4 <_svfiprintf_r>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	bfbc      	itt	lt
 8003594:	238b      	movlt	r3, #139	; 0x8b
 8003596:	602b      	strlt	r3, [r5, #0]
 8003598:	2c00      	cmp	r4, #0
 800359a:	d0e3      	beq.n	8003564 <_vsniprintf_r+0x16>
 800359c:	9b00      	ldr	r3, [sp, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e7df      	b.n	8003564 <_vsniprintf_r+0x16>

080035a4 <vsniprintf>:
 80035a4:	b507      	push	{r0, r1, r2, lr}
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	460a      	mov	r2, r1
 80035ac:	4601      	mov	r1, r0
 80035ae:	4803      	ldr	r0, [pc, #12]	; (80035bc <vsniprintf+0x18>)
 80035b0:	6800      	ldr	r0, [r0, #0]
 80035b2:	f7ff ffcc 	bl	800354e <_vsniprintf_r>
 80035b6:	b003      	add	sp, #12
 80035b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80035bc:	200001b0 	.word	0x200001b0

080035c0 <__retarget_lock_acquire_recursive>:
 80035c0:	4770      	bx	lr

080035c2 <__retarget_lock_release_recursive>:
 80035c2:	4770      	bx	lr

080035c4 <sbrk_aligned>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	4e0e      	ldr	r6, [pc, #56]	; (8003600 <sbrk_aligned+0x3c>)
 80035c8:	460c      	mov	r4, r1
 80035ca:	6831      	ldr	r1, [r6, #0]
 80035cc:	4605      	mov	r5, r0
 80035ce:	b911      	cbnz	r1, 80035d6 <sbrk_aligned+0x12>
 80035d0:	f000 fb7c 	bl	8003ccc <_sbrk_r>
 80035d4:	6030      	str	r0, [r6, #0]
 80035d6:	4621      	mov	r1, r4
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 fb77 	bl	8003ccc <_sbrk_r>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	d00a      	beq.n	80035f8 <sbrk_aligned+0x34>
 80035e2:	1cc4      	adds	r4, r0, #3
 80035e4:	f024 0403 	bic.w	r4, r4, #3
 80035e8:	42a0      	cmp	r0, r4
 80035ea:	d007      	beq.n	80035fc <sbrk_aligned+0x38>
 80035ec:	1a21      	subs	r1, r4, r0
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 fb6c 	bl	8003ccc <_sbrk_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d101      	bne.n	80035fc <sbrk_aligned+0x38>
 80035f8:	f04f 34ff 	mov.w	r4, #4294967295
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	2000046c 	.word	0x2000046c

08003604 <_malloc_r>:
 8003604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003608:	1ccd      	adds	r5, r1, #3
 800360a:	f025 0503 	bic.w	r5, r5, #3
 800360e:	3508      	adds	r5, #8
 8003610:	2d0c      	cmp	r5, #12
 8003612:	bf38      	it	cc
 8003614:	250c      	movcc	r5, #12
 8003616:	2d00      	cmp	r5, #0
 8003618:	4607      	mov	r7, r0
 800361a:	db01      	blt.n	8003620 <_malloc_r+0x1c>
 800361c:	42a9      	cmp	r1, r5
 800361e:	d905      	bls.n	800362c <_malloc_r+0x28>
 8003620:	230c      	movs	r3, #12
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	2600      	movs	r6, #0
 8003626:	4630      	mov	r0, r6
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362c:	4e2e      	ldr	r6, [pc, #184]	; (80036e8 <_malloc_r+0xe4>)
 800362e:	f000 fb77 	bl	8003d20 <__malloc_lock>
 8003632:	6833      	ldr	r3, [r6, #0]
 8003634:	461c      	mov	r4, r3
 8003636:	bb34      	cbnz	r4, 8003686 <_malloc_r+0x82>
 8003638:	4629      	mov	r1, r5
 800363a:	4638      	mov	r0, r7
 800363c:	f7ff ffc2 	bl	80035c4 <sbrk_aligned>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	4604      	mov	r4, r0
 8003644:	d14d      	bne.n	80036e2 <_malloc_r+0xde>
 8003646:	6834      	ldr	r4, [r6, #0]
 8003648:	4626      	mov	r6, r4
 800364a:	2e00      	cmp	r6, #0
 800364c:	d140      	bne.n	80036d0 <_malloc_r+0xcc>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	4631      	mov	r1, r6
 8003652:	4638      	mov	r0, r7
 8003654:	eb04 0803 	add.w	r8, r4, r3
 8003658:	f000 fb38 	bl	8003ccc <_sbrk_r>
 800365c:	4580      	cmp	r8, r0
 800365e:	d13a      	bne.n	80036d6 <_malloc_r+0xd2>
 8003660:	6821      	ldr	r1, [r4, #0]
 8003662:	3503      	adds	r5, #3
 8003664:	1a6d      	subs	r5, r5, r1
 8003666:	f025 0503 	bic.w	r5, r5, #3
 800366a:	3508      	adds	r5, #8
 800366c:	2d0c      	cmp	r5, #12
 800366e:	bf38      	it	cc
 8003670:	250c      	movcc	r5, #12
 8003672:	4629      	mov	r1, r5
 8003674:	4638      	mov	r0, r7
 8003676:	f7ff ffa5 	bl	80035c4 <sbrk_aligned>
 800367a:	3001      	adds	r0, #1
 800367c:	d02b      	beq.n	80036d6 <_malloc_r+0xd2>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	442b      	add	r3, r5
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	e00e      	b.n	80036a4 <_malloc_r+0xa0>
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	1b52      	subs	r2, r2, r5
 800368a:	d41e      	bmi.n	80036ca <_malloc_r+0xc6>
 800368c:	2a0b      	cmp	r2, #11
 800368e:	d916      	bls.n	80036be <_malloc_r+0xba>
 8003690:	1961      	adds	r1, r4, r5
 8003692:	42a3      	cmp	r3, r4
 8003694:	6025      	str	r5, [r4, #0]
 8003696:	bf18      	it	ne
 8003698:	6059      	strne	r1, [r3, #4]
 800369a:	6863      	ldr	r3, [r4, #4]
 800369c:	bf08      	it	eq
 800369e:	6031      	streq	r1, [r6, #0]
 80036a0:	5162      	str	r2, [r4, r5]
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	4638      	mov	r0, r7
 80036a6:	f104 060b 	add.w	r6, r4, #11
 80036aa:	f000 fb3f 	bl	8003d2c <__malloc_unlock>
 80036ae:	f026 0607 	bic.w	r6, r6, #7
 80036b2:	1d23      	adds	r3, r4, #4
 80036b4:	1af2      	subs	r2, r6, r3
 80036b6:	d0b6      	beq.n	8003626 <_malloc_r+0x22>
 80036b8:	1b9b      	subs	r3, r3, r6
 80036ba:	50a3      	str	r3, [r4, r2]
 80036bc:	e7b3      	b.n	8003626 <_malloc_r+0x22>
 80036be:	6862      	ldr	r2, [r4, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	bf0c      	ite	eq
 80036c4:	6032      	streq	r2, [r6, #0]
 80036c6:	605a      	strne	r2, [r3, #4]
 80036c8:	e7ec      	b.n	80036a4 <_malloc_r+0xa0>
 80036ca:	4623      	mov	r3, r4
 80036cc:	6864      	ldr	r4, [r4, #4]
 80036ce:	e7b2      	b.n	8003636 <_malloc_r+0x32>
 80036d0:	4634      	mov	r4, r6
 80036d2:	6876      	ldr	r6, [r6, #4]
 80036d4:	e7b9      	b.n	800364a <_malloc_r+0x46>
 80036d6:	230c      	movs	r3, #12
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4638      	mov	r0, r7
 80036dc:	f000 fb26 	bl	8003d2c <__malloc_unlock>
 80036e0:	e7a1      	b.n	8003626 <_malloc_r+0x22>
 80036e2:	6025      	str	r5, [r4, #0]
 80036e4:	e7de      	b.n	80036a4 <_malloc_r+0xa0>
 80036e6:	bf00      	nop
 80036e8:	20000468 	.word	0x20000468

080036ec <__ssputs_r>:
 80036ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	688e      	ldr	r6, [r1, #8]
 80036f2:	429e      	cmp	r6, r3
 80036f4:	4682      	mov	sl, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	4690      	mov	r8, r2
 80036fa:	461f      	mov	r7, r3
 80036fc:	d838      	bhi.n	8003770 <__ssputs_r+0x84>
 80036fe:	898a      	ldrh	r2, [r1, #12]
 8003700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003704:	d032      	beq.n	800376c <__ssputs_r+0x80>
 8003706:	6825      	ldr	r5, [r4, #0]
 8003708:	6909      	ldr	r1, [r1, #16]
 800370a:	eba5 0901 	sub.w	r9, r5, r1
 800370e:	6965      	ldr	r5, [r4, #20]
 8003710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003718:	3301      	adds	r3, #1
 800371a:	444b      	add	r3, r9
 800371c:	106d      	asrs	r5, r5, #1
 800371e:	429d      	cmp	r5, r3
 8003720:	bf38      	it	cc
 8003722:	461d      	movcc	r5, r3
 8003724:	0553      	lsls	r3, r2, #21
 8003726:	d531      	bpl.n	800378c <__ssputs_r+0xa0>
 8003728:	4629      	mov	r1, r5
 800372a:	f7ff ff6b 	bl	8003604 <_malloc_r>
 800372e:	4606      	mov	r6, r0
 8003730:	b950      	cbnz	r0, 8003748 <__ssputs_r+0x5c>
 8003732:	230c      	movs	r3, #12
 8003734:	f8ca 3000 	str.w	r3, [sl]
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003748:	6921      	ldr	r1, [r4, #16]
 800374a:	464a      	mov	r2, r9
 800374c:	f7ff feda 	bl	8003504 <memcpy>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	6126      	str	r6, [r4, #16]
 800375e:	6165      	str	r5, [r4, #20]
 8003760:	444e      	add	r6, r9
 8003762:	eba5 0509 	sub.w	r5, r5, r9
 8003766:	6026      	str	r6, [r4, #0]
 8003768:	60a5      	str	r5, [r4, #8]
 800376a:	463e      	mov	r6, r7
 800376c:	42be      	cmp	r6, r7
 800376e:	d900      	bls.n	8003772 <__ssputs_r+0x86>
 8003770:	463e      	mov	r6, r7
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	4632      	mov	r2, r6
 8003776:	4641      	mov	r1, r8
 8003778:	f000 fab8 	bl	8003cec <memmove>
 800377c:	68a3      	ldr	r3, [r4, #8]
 800377e:	1b9b      	subs	r3, r3, r6
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4433      	add	r3, r6
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	2000      	movs	r0, #0
 800378a:	e7db      	b.n	8003744 <__ssputs_r+0x58>
 800378c:	462a      	mov	r2, r5
 800378e:	f000 fb1f 	bl	8003dd0 <_realloc_r>
 8003792:	4606      	mov	r6, r0
 8003794:	2800      	cmp	r0, #0
 8003796:	d1e1      	bne.n	800375c <__ssputs_r+0x70>
 8003798:	6921      	ldr	r1, [r4, #16]
 800379a:	4650      	mov	r0, sl
 800379c:	f000 facc 	bl	8003d38 <_free_r>
 80037a0:	e7c7      	b.n	8003732 <__ssputs_r+0x46>
	...

080037a4 <_svfiprintf_r>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	4698      	mov	r8, r3
 80037aa:	898b      	ldrh	r3, [r1, #12]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	b09d      	sub	sp, #116	; 0x74
 80037b0:	4607      	mov	r7, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	4614      	mov	r4, r2
 80037b6:	d50e      	bpl.n	80037d6 <_svfiprintf_r+0x32>
 80037b8:	690b      	ldr	r3, [r1, #16]
 80037ba:	b963      	cbnz	r3, 80037d6 <_svfiprintf_r+0x32>
 80037bc:	2140      	movs	r1, #64	; 0x40
 80037be:	f7ff ff21 	bl	8003604 <_malloc_r>
 80037c2:	6028      	str	r0, [r5, #0]
 80037c4:	6128      	str	r0, [r5, #16]
 80037c6:	b920      	cbnz	r0, 80037d2 <_svfiprintf_r+0x2e>
 80037c8:	230c      	movs	r3, #12
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	e0d1      	b.n	8003976 <_svfiprintf_r+0x1d2>
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	616b      	str	r3, [r5, #20]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9309      	str	r3, [sp, #36]	; 0x24
 80037da:	2320      	movs	r3, #32
 80037dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037e4:	2330      	movs	r3, #48	; 0x30
 80037e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003990 <_svfiprintf_r+0x1ec>
 80037ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ee:	f04f 0901 	mov.w	r9, #1
 80037f2:	4623      	mov	r3, r4
 80037f4:	469a      	mov	sl, r3
 80037f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037fa:	b10a      	cbz	r2, 8003800 <_svfiprintf_r+0x5c>
 80037fc:	2a25      	cmp	r2, #37	; 0x25
 80037fe:	d1f9      	bne.n	80037f4 <_svfiprintf_r+0x50>
 8003800:	ebba 0b04 	subs.w	fp, sl, r4
 8003804:	d00b      	beq.n	800381e <_svfiprintf_r+0x7a>
 8003806:	465b      	mov	r3, fp
 8003808:	4622      	mov	r2, r4
 800380a:	4629      	mov	r1, r5
 800380c:	4638      	mov	r0, r7
 800380e:	f7ff ff6d 	bl	80036ec <__ssputs_r>
 8003812:	3001      	adds	r0, #1
 8003814:	f000 80aa 	beq.w	800396c <_svfiprintf_r+0x1c8>
 8003818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800381a:	445a      	add	r2, fp
 800381c:	9209      	str	r2, [sp, #36]	; 0x24
 800381e:	f89a 3000 	ldrb.w	r3, [sl]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a2 	beq.w	800396c <_svfiprintf_r+0x1c8>
 8003828:	2300      	movs	r3, #0
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003832:	f10a 0a01 	add.w	sl, sl, #1
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	9307      	str	r3, [sp, #28]
 800383a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800383e:	931a      	str	r3, [sp, #104]	; 0x68
 8003840:	4654      	mov	r4, sl
 8003842:	2205      	movs	r2, #5
 8003844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003848:	4851      	ldr	r0, [pc, #324]	; (8003990 <_svfiprintf_r+0x1ec>)
 800384a:	f7fc fce9 	bl	8000220 <memchr>
 800384e:	9a04      	ldr	r2, [sp, #16]
 8003850:	b9d8      	cbnz	r0, 800388a <_svfiprintf_r+0xe6>
 8003852:	06d0      	lsls	r0, r2, #27
 8003854:	bf44      	itt	mi
 8003856:	2320      	movmi	r3, #32
 8003858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800385c:	0711      	lsls	r1, r2, #28
 800385e:	bf44      	itt	mi
 8003860:	232b      	movmi	r3, #43	; 0x2b
 8003862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003866:	f89a 3000 	ldrb.w	r3, [sl]
 800386a:	2b2a      	cmp	r3, #42	; 0x2a
 800386c:	d015      	beq.n	800389a <_svfiprintf_r+0xf6>
 800386e:	9a07      	ldr	r2, [sp, #28]
 8003870:	4654      	mov	r4, sl
 8003872:	2000      	movs	r0, #0
 8003874:	f04f 0c0a 	mov.w	ip, #10
 8003878:	4621      	mov	r1, r4
 800387a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800387e:	3b30      	subs	r3, #48	; 0x30
 8003880:	2b09      	cmp	r3, #9
 8003882:	d94e      	bls.n	8003922 <_svfiprintf_r+0x17e>
 8003884:	b1b0      	cbz	r0, 80038b4 <_svfiprintf_r+0x110>
 8003886:	9207      	str	r2, [sp, #28]
 8003888:	e014      	b.n	80038b4 <_svfiprintf_r+0x110>
 800388a:	eba0 0308 	sub.w	r3, r0, r8
 800388e:	fa09 f303 	lsl.w	r3, r9, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	9304      	str	r3, [sp, #16]
 8003896:	46a2      	mov	sl, r4
 8003898:	e7d2      	b.n	8003840 <_svfiprintf_r+0x9c>
 800389a:	9b03      	ldr	r3, [sp, #12]
 800389c:	1d19      	adds	r1, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	9103      	str	r1, [sp, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfbb      	ittet	lt
 80038a6:	425b      	neglt	r3, r3
 80038a8:	f042 0202 	orrlt.w	r2, r2, #2
 80038ac:	9307      	strge	r3, [sp, #28]
 80038ae:	9307      	strlt	r3, [sp, #28]
 80038b0:	bfb8      	it	lt
 80038b2:	9204      	strlt	r2, [sp, #16]
 80038b4:	7823      	ldrb	r3, [r4, #0]
 80038b6:	2b2e      	cmp	r3, #46	; 0x2e
 80038b8:	d10c      	bne.n	80038d4 <_svfiprintf_r+0x130>
 80038ba:	7863      	ldrb	r3, [r4, #1]
 80038bc:	2b2a      	cmp	r3, #42	; 0x2a
 80038be:	d135      	bne.n	800392c <_svfiprintf_r+0x188>
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	9203      	str	r2, [sp, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bfb8      	it	lt
 80038cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80038d0:	3402      	adds	r4, #2
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039a0 <_svfiprintf_r+0x1fc>
 80038d8:	7821      	ldrb	r1, [r4, #0]
 80038da:	2203      	movs	r2, #3
 80038dc:	4650      	mov	r0, sl
 80038de:	f7fc fc9f 	bl	8000220 <memchr>
 80038e2:	b140      	cbz	r0, 80038f6 <_svfiprintf_r+0x152>
 80038e4:	2340      	movs	r3, #64	; 0x40
 80038e6:	eba0 000a 	sub.w	r0, r0, sl
 80038ea:	fa03 f000 	lsl.w	r0, r3, r0
 80038ee:	9b04      	ldr	r3, [sp, #16]
 80038f0:	4303      	orrs	r3, r0
 80038f2:	3401      	adds	r4, #1
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038fa:	4826      	ldr	r0, [pc, #152]	; (8003994 <_svfiprintf_r+0x1f0>)
 80038fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003900:	2206      	movs	r2, #6
 8003902:	f7fc fc8d 	bl	8000220 <memchr>
 8003906:	2800      	cmp	r0, #0
 8003908:	d038      	beq.n	800397c <_svfiprintf_r+0x1d8>
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <_svfiprintf_r+0x1f4>)
 800390c:	bb1b      	cbnz	r3, 8003956 <_svfiprintf_r+0x1b2>
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	3307      	adds	r3, #7
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	3308      	adds	r3, #8
 8003918:	9303      	str	r3, [sp, #12]
 800391a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391c:	4433      	add	r3, r6
 800391e:	9309      	str	r3, [sp, #36]	; 0x24
 8003920:	e767      	b.n	80037f2 <_svfiprintf_r+0x4e>
 8003922:	fb0c 3202 	mla	r2, ip, r2, r3
 8003926:	460c      	mov	r4, r1
 8003928:	2001      	movs	r0, #1
 800392a:	e7a5      	b.n	8003878 <_svfiprintf_r+0xd4>
 800392c:	2300      	movs	r3, #0
 800392e:	3401      	adds	r4, #1
 8003930:	9305      	str	r3, [sp, #20]
 8003932:	4619      	mov	r1, r3
 8003934:	f04f 0c0a 	mov.w	ip, #10
 8003938:	4620      	mov	r0, r4
 800393a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800393e:	3a30      	subs	r2, #48	; 0x30
 8003940:	2a09      	cmp	r2, #9
 8003942:	d903      	bls.n	800394c <_svfiprintf_r+0x1a8>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0c5      	beq.n	80038d4 <_svfiprintf_r+0x130>
 8003948:	9105      	str	r1, [sp, #20]
 800394a:	e7c3      	b.n	80038d4 <_svfiprintf_r+0x130>
 800394c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003950:	4604      	mov	r4, r0
 8003952:	2301      	movs	r3, #1
 8003954:	e7f0      	b.n	8003938 <_svfiprintf_r+0x194>
 8003956:	ab03      	add	r3, sp, #12
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	462a      	mov	r2, r5
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <_svfiprintf_r+0x1f8>)
 800395e:	a904      	add	r1, sp, #16
 8003960:	4638      	mov	r0, r7
 8003962:	f3af 8000 	nop.w
 8003966:	1c42      	adds	r2, r0, #1
 8003968:	4606      	mov	r6, r0
 800396a:	d1d6      	bne.n	800391a <_svfiprintf_r+0x176>
 800396c:	89ab      	ldrh	r3, [r5, #12]
 800396e:	065b      	lsls	r3, r3, #25
 8003970:	f53f af2c 	bmi.w	80037cc <_svfiprintf_r+0x28>
 8003974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003976:	b01d      	add	sp, #116	; 0x74
 8003978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397c:	ab03      	add	r3, sp, #12
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	462a      	mov	r2, r5
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <_svfiprintf_r+0x1f8>)
 8003984:	a904      	add	r1, sp, #16
 8003986:	4638      	mov	r0, r7
 8003988:	f000 f87a 	bl	8003a80 <_printf_i>
 800398c:	e7eb      	b.n	8003966 <_svfiprintf_r+0x1c2>
 800398e:	bf00      	nop
 8003990:	08006c2c 	.word	0x08006c2c
 8003994:	08006c36 	.word	0x08006c36
 8003998:	00000000 	.word	0x00000000
 800399c:	080036ed 	.word	0x080036ed
 80039a0:	08006c32 	.word	0x08006c32

080039a4 <_printf_common>:
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	4616      	mov	r6, r2
 80039aa:	4699      	mov	r9, r3
 80039ac:	688a      	ldr	r2, [r1, #8]
 80039ae:	690b      	ldr	r3, [r1, #16]
 80039b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bfb8      	it	lt
 80039b8:	4613      	movlt	r3, r2
 80039ba:	6033      	str	r3, [r6, #0]
 80039bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039c0:	4607      	mov	r7, r0
 80039c2:	460c      	mov	r4, r1
 80039c4:	b10a      	cbz	r2, 80039ca <_printf_common+0x26>
 80039c6:	3301      	adds	r3, #1
 80039c8:	6033      	str	r3, [r6, #0]
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	0699      	lsls	r1, r3, #26
 80039ce:	bf42      	ittt	mi
 80039d0:	6833      	ldrmi	r3, [r6, #0]
 80039d2:	3302      	addmi	r3, #2
 80039d4:	6033      	strmi	r3, [r6, #0]
 80039d6:	6825      	ldr	r5, [r4, #0]
 80039d8:	f015 0506 	ands.w	r5, r5, #6
 80039dc:	d106      	bne.n	80039ec <_printf_common+0x48>
 80039de:	f104 0a19 	add.w	sl, r4, #25
 80039e2:	68e3      	ldr	r3, [r4, #12]
 80039e4:	6832      	ldr	r2, [r6, #0]
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	42ab      	cmp	r3, r5
 80039ea:	dc26      	bgt.n	8003a3a <_printf_common+0x96>
 80039ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039f0:	1e13      	subs	r3, r2, #0
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	bf18      	it	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	0692      	lsls	r2, r2, #26
 80039fa:	d42b      	bmi.n	8003a54 <_printf_common+0xb0>
 80039fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a00:	4649      	mov	r1, r9
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c0      	blx	r8
 8003a06:	3001      	adds	r0, #1
 8003a08:	d01e      	beq.n	8003a48 <_printf_common+0xa4>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	68e5      	ldr	r5, [r4, #12]
 8003a0e:	6832      	ldr	r2, [r6, #0]
 8003a10:	f003 0306 	and.w	r3, r3, #6
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	bf08      	it	eq
 8003a18:	1aad      	subeq	r5, r5, r2
 8003a1a:	68a3      	ldr	r3, [r4, #8]
 8003a1c:	6922      	ldr	r2, [r4, #16]
 8003a1e:	bf0c      	ite	eq
 8003a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a24:	2500      	movne	r5, #0
 8003a26:	4293      	cmp	r3, r2
 8003a28:	bfc4      	itt	gt
 8003a2a:	1a9b      	subgt	r3, r3, r2
 8003a2c:	18ed      	addgt	r5, r5, r3
 8003a2e:	2600      	movs	r6, #0
 8003a30:	341a      	adds	r4, #26
 8003a32:	42b5      	cmp	r5, r6
 8003a34:	d11a      	bne.n	8003a6c <_printf_common+0xc8>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e008      	b.n	8003a4c <_printf_common+0xa8>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	4649      	mov	r1, r9
 8003a40:	4638      	mov	r0, r7
 8003a42:	47c0      	blx	r8
 8003a44:	3001      	adds	r0, #1
 8003a46:	d103      	bne.n	8003a50 <_printf_common+0xac>
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a50:	3501      	adds	r5, #1
 8003a52:	e7c6      	b.n	80039e2 <_printf_common+0x3e>
 8003a54:	18e1      	adds	r1, r4, r3
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	2030      	movs	r0, #48	; 0x30
 8003a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a5e:	4422      	add	r2, r4
 8003a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a68:	3302      	adds	r3, #2
 8003a6a:	e7c7      	b.n	80039fc <_printf_common+0x58>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4649      	mov	r1, r9
 8003a72:	4638      	mov	r0, r7
 8003a74:	47c0      	blx	r8
 8003a76:	3001      	adds	r0, #1
 8003a78:	d0e6      	beq.n	8003a48 <_printf_common+0xa4>
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	e7d9      	b.n	8003a32 <_printf_common+0x8e>
	...

08003a80 <_printf_i>:
 8003a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	7e0f      	ldrb	r7, [r1, #24]
 8003a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a88:	2f78      	cmp	r7, #120	; 0x78
 8003a8a:	4691      	mov	r9, r2
 8003a8c:	4680      	mov	r8, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	469a      	mov	sl, r3
 8003a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a96:	d807      	bhi.n	8003aa8 <_printf_i+0x28>
 8003a98:	2f62      	cmp	r7, #98	; 0x62
 8003a9a:	d80a      	bhi.n	8003ab2 <_printf_i+0x32>
 8003a9c:	2f00      	cmp	r7, #0
 8003a9e:	f000 80d8 	beq.w	8003c52 <_printf_i+0x1d2>
 8003aa2:	2f58      	cmp	r7, #88	; 0x58
 8003aa4:	f000 80a3 	beq.w	8003bee <_printf_i+0x16e>
 8003aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ab0:	e03a      	b.n	8003b28 <_printf_i+0xa8>
 8003ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ab6:	2b15      	cmp	r3, #21
 8003ab8:	d8f6      	bhi.n	8003aa8 <_printf_i+0x28>
 8003aba:	a101      	add	r1, pc, #4	; (adr r1, 8003ac0 <_printf_i+0x40>)
 8003abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac0:	08003b19 	.word	0x08003b19
 8003ac4:	08003b2d 	.word	0x08003b2d
 8003ac8:	08003aa9 	.word	0x08003aa9
 8003acc:	08003aa9 	.word	0x08003aa9
 8003ad0:	08003aa9 	.word	0x08003aa9
 8003ad4:	08003aa9 	.word	0x08003aa9
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003aa9 	.word	0x08003aa9
 8003ae0:	08003aa9 	.word	0x08003aa9
 8003ae4:	08003aa9 	.word	0x08003aa9
 8003ae8:	08003aa9 	.word	0x08003aa9
 8003aec:	08003c39 	.word	0x08003c39
 8003af0:	08003b5d 	.word	0x08003b5d
 8003af4:	08003c1b 	.word	0x08003c1b
 8003af8:	08003aa9 	.word	0x08003aa9
 8003afc:	08003aa9 	.word	0x08003aa9
 8003b00:	08003c5b 	.word	0x08003c5b
 8003b04:	08003aa9 	.word	0x08003aa9
 8003b08:	08003b5d 	.word	0x08003b5d
 8003b0c:	08003aa9 	.word	0x08003aa9
 8003b10:	08003aa9 	.word	0x08003aa9
 8003b14:	08003c23 	.word	0x08003c23
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	602a      	str	r2, [r5, #0]
 8003b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0a3      	b.n	8003c74 <_printf_i+0x1f4>
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	6829      	ldr	r1, [r5, #0]
 8003b30:	0606      	lsls	r6, r0, #24
 8003b32:	f101 0304 	add.w	r3, r1, #4
 8003b36:	d50a      	bpl.n	8003b4e <_printf_i+0xce>
 8003b38:	680e      	ldr	r6, [r1, #0]
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	2e00      	cmp	r6, #0
 8003b3e:	da03      	bge.n	8003b48 <_printf_i+0xc8>
 8003b40:	232d      	movs	r3, #45	; 0x2d
 8003b42:	4276      	negs	r6, r6
 8003b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b48:	485e      	ldr	r0, [pc, #376]	; (8003cc4 <_printf_i+0x244>)
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	e019      	b.n	8003b82 <_printf_i+0x102>
 8003b4e:	680e      	ldr	r6, [r1, #0]
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b56:	bf18      	it	ne
 8003b58:	b236      	sxthne	r6, r6
 8003b5a:	e7ef      	b.n	8003b3c <_printf_i+0xbc>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	6029      	str	r1, [r5, #0]
 8003b64:	0601      	lsls	r1, r0, #24
 8003b66:	d501      	bpl.n	8003b6c <_printf_i+0xec>
 8003b68:	681e      	ldr	r6, [r3, #0]
 8003b6a:	e002      	b.n	8003b72 <_printf_i+0xf2>
 8003b6c:	0646      	lsls	r6, r0, #25
 8003b6e:	d5fb      	bpl.n	8003b68 <_printf_i+0xe8>
 8003b70:	881e      	ldrh	r6, [r3, #0]
 8003b72:	4854      	ldr	r0, [pc, #336]	; (8003cc4 <_printf_i+0x244>)
 8003b74:	2f6f      	cmp	r7, #111	; 0x6f
 8003b76:	bf0c      	ite	eq
 8003b78:	2308      	moveq	r3, #8
 8003b7a:	230a      	movne	r3, #10
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b82:	6865      	ldr	r5, [r4, #4]
 8003b84:	60a5      	str	r5, [r4, #8]
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	bfa2      	ittt	ge
 8003b8a:	6821      	ldrge	r1, [r4, #0]
 8003b8c:	f021 0104 	bicge.w	r1, r1, #4
 8003b90:	6021      	strge	r1, [r4, #0]
 8003b92:	b90e      	cbnz	r6, 8003b98 <_printf_i+0x118>
 8003b94:	2d00      	cmp	r5, #0
 8003b96:	d04d      	beq.n	8003c34 <_printf_i+0x1b4>
 8003b98:	4615      	mov	r5, r2
 8003b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003ba2:	5dc7      	ldrb	r7, [r0, r7]
 8003ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ba8:	4637      	mov	r7, r6
 8003baa:	42bb      	cmp	r3, r7
 8003bac:	460e      	mov	r6, r1
 8003bae:	d9f4      	bls.n	8003b9a <_printf_i+0x11a>
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d10b      	bne.n	8003bcc <_printf_i+0x14c>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	07de      	lsls	r6, r3, #31
 8003bb8:	d508      	bpl.n	8003bcc <_printf_i+0x14c>
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	6861      	ldr	r1, [r4, #4]
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	bfde      	ittt	le
 8003bc2:	2330      	movle	r3, #48	; 0x30
 8003bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bcc:	1b52      	subs	r2, r2, r5
 8003bce:	6122      	str	r2, [r4, #16]
 8003bd0:	f8cd a000 	str.w	sl, [sp]
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	aa03      	add	r2, sp, #12
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4640      	mov	r0, r8
 8003bdc:	f7ff fee2 	bl	80039a4 <_printf_common>
 8003be0:	3001      	adds	r0, #1
 8003be2:	d14c      	bne.n	8003c7e <_printf_i+0x1fe>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	b004      	add	sp, #16
 8003bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bee:	4835      	ldr	r0, [pc, #212]	; (8003cc4 <_printf_i+0x244>)
 8003bf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bf4:	6829      	ldr	r1, [r5, #0]
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bfc:	6029      	str	r1, [r5, #0]
 8003bfe:	061d      	lsls	r5, r3, #24
 8003c00:	d514      	bpl.n	8003c2c <_printf_i+0x1ac>
 8003c02:	07df      	lsls	r7, r3, #31
 8003c04:	bf44      	itt	mi
 8003c06:	f043 0320 	orrmi.w	r3, r3, #32
 8003c0a:	6023      	strmi	r3, [r4, #0]
 8003c0c:	b91e      	cbnz	r6, 8003c16 <_printf_i+0x196>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	f023 0320 	bic.w	r3, r3, #32
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	2310      	movs	r3, #16
 8003c18:	e7b0      	b.n	8003b7c <_printf_i+0xfc>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f043 0320 	orr.w	r3, r3, #32
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	2378      	movs	r3, #120	; 0x78
 8003c24:	4828      	ldr	r0, [pc, #160]	; (8003cc8 <_printf_i+0x248>)
 8003c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c2a:	e7e3      	b.n	8003bf4 <_printf_i+0x174>
 8003c2c:	0659      	lsls	r1, r3, #25
 8003c2e:	bf48      	it	mi
 8003c30:	b2b6      	uxthmi	r6, r6
 8003c32:	e7e6      	b.n	8003c02 <_printf_i+0x182>
 8003c34:	4615      	mov	r5, r2
 8003c36:	e7bb      	b.n	8003bb0 <_printf_i+0x130>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	6826      	ldr	r6, [r4, #0]
 8003c3c:	6961      	ldr	r1, [r4, #20]
 8003c3e:	1d18      	adds	r0, r3, #4
 8003c40:	6028      	str	r0, [r5, #0]
 8003c42:	0635      	lsls	r5, r6, #24
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	d501      	bpl.n	8003c4c <_printf_i+0x1cc>
 8003c48:	6019      	str	r1, [r3, #0]
 8003c4a:	e002      	b.n	8003c52 <_printf_i+0x1d2>
 8003c4c:	0670      	lsls	r0, r6, #25
 8003c4e:	d5fb      	bpl.n	8003c48 <_printf_i+0x1c8>
 8003c50:	8019      	strh	r1, [r3, #0]
 8003c52:	2300      	movs	r3, #0
 8003c54:	6123      	str	r3, [r4, #16]
 8003c56:	4615      	mov	r5, r2
 8003c58:	e7ba      	b.n	8003bd0 <_printf_i+0x150>
 8003c5a:	682b      	ldr	r3, [r5, #0]
 8003c5c:	1d1a      	adds	r2, r3, #4
 8003c5e:	602a      	str	r2, [r5, #0]
 8003c60:	681d      	ldr	r5, [r3, #0]
 8003c62:	6862      	ldr	r2, [r4, #4]
 8003c64:	2100      	movs	r1, #0
 8003c66:	4628      	mov	r0, r5
 8003c68:	f7fc fada 	bl	8000220 <memchr>
 8003c6c:	b108      	cbz	r0, 8003c72 <_printf_i+0x1f2>
 8003c6e:	1b40      	subs	r0, r0, r5
 8003c70:	6060      	str	r0, [r4, #4]
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	2300      	movs	r3, #0
 8003c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c7c:	e7a8      	b.n	8003bd0 <_printf_i+0x150>
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	462a      	mov	r2, r5
 8003c82:	4649      	mov	r1, r9
 8003c84:	4640      	mov	r0, r8
 8003c86:	47d0      	blx	sl
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d0ab      	beq.n	8003be4 <_printf_i+0x164>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	079b      	lsls	r3, r3, #30
 8003c90:	d413      	bmi.n	8003cba <_printf_i+0x23a>
 8003c92:	68e0      	ldr	r0, [r4, #12]
 8003c94:	9b03      	ldr	r3, [sp, #12]
 8003c96:	4298      	cmp	r0, r3
 8003c98:	bfb8      	it	lt
 8003c9a:	4618      	movlt	r0, r3
 8003c9c:	e7a4      	b.n	8003be8 <_printf_i+0x168>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	47d0      	blx	sl
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d09b      	beq.n	8003be4 <_printf_i+0x164>
 8003cac:	3501      	adds	r5, #1
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	9903      	ldr	r1, [sp, #12]
 8003cb2:	1a5b      	subs	r3, r3, r1
 8003cb4:	42ab      	cmp	r3, r5
 8003cb6:	dcf2      	bgt.n	8003c9e <_printf_i+0x21e>
 8003cb8:	e7eb      	b.n	8003c92 <_printf_i+0x212>
 8003cba:	2500      	movs	r5, #0
 8003cbc:	f104 0619 	add.w	r6, r4, #25
 8003cc0:	e7f5      	b.n	8003cae <_printf_i+0x22e>
 8003cc2:	bf00      	nop
 8003cc4:	08006c3d 	.word	0x08006c3d
 8003cc8:	08006c4e 	.word	0x08006c4e

08003ccc <_sbrk_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4d06      	ldr	r5, [pc, #24]	; (8003ce8 <_sbrk_r+0x1c>)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	f7fd fbee 	bl	80014b8 <_sbrk>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_sbrk_r+0x1a>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_sbrk_r+0x1a>
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	20000470 	.word	0x20000470

08003cec <memmove>:
 8003cec:	4288      	cmp	r0, r1
 8003cee:	b510      	push	{r4, lr}
 8003cf0:	eb01 0402 	add.w	r4, r1, r2
 8003cf4:	d902      	bls.n	8003cfc <memmove+0x10>
 8003cf6:	4284      	cmp	r4, r0
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	d807      	bhi.n	8003d0c <memmove+0x20>
 8003cfc:	1e43      	subs	r3, r0, #1
 8003cfe:	42a1      	cmp	r1, r4
 8003d00:	d008      	beq.n	8003d14 <memmove+0x28>
 8003d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d0a:	e7f8      	b.n	8003cfe <memmove+0x12>
 8003d0c:	4402      	add	r2, r0
 8003d0e:	4601      	mov	r1, r0
 8003d10:	428a      	cmp	r2, r1
 8003d12:	d100      	bne.n	8003d16 <memmove+0x2a>
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d1e:	e7f7      	b.n	8003d10 <memmove+0x24>

08003d20 <__malloc_lock>:
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <__malloc_lock+0x8>)
 8003d22:	f7ff bc4d 	b.w	80035c0 <__retarget_lock_acquire_recursive>
 8003d26:	bf00      	nop
 8003d28:	20000464 	.word	0x20000464

08003d2c <__malloc_unlock>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <__malloc_unlock+0x8>)
 8003d2e:	f7ff bc48 	b.w	80035c2 <__retarget_lock_release_recursive>
 8003d32:	bf00      	nop
 8003d34:	20000464 	.word	0x20000464

08003d38 <_free_r>:
 8003d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d044      	beq.n	8003dc8 <_free_r+0x90>
 8003d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d42:	9001      	str	r0, [sp, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f1a1 0404 	sub.w	r4, r1, #4
 8003d4a:	bfb8      	it	lt
 8003d4c:	18e4      	addlt	r4, r4, r3
 8003d4e:	f7ff ffe7 	bl	8003d20 <__malloc_lock>
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <_free_r+0x94>)
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	b933      	cbnz	r3, 8003d68 <_free_r+0x30>
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	6014      	str	r4, [r2, #0]
 8003d5e:	b003      	add	sp, #12
 8003d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d64:	f7ff bfe2 	b.w	8003d2c <__malloc_unlock>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d908      	bls.n	8003d7e <_free_r+0x46>
 8003d6c:	6825      	ldr	r5, [r4, #0]
 8003d6e:	1961      	adds	r1, r4, r5
 8003d70:	428b      	cmp	r3, r1
 8003d72:	bf01      	itttt	eq
 8003d74:	6819      	ldreq	r1, [r3, #0]
 8003d76:	685b      	ldreq	r3, [r3, #4]
 8003d78:	1949      	addeq	r1, r1, r5
 8003d7a:	6021      	streq	r1, [r4, #0]
 8003d7c:	e7ed      	b.n	8003d5a <_free_r+0x22>
 8003d7e:	461a      	mov	r2, r3
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b10b      	cbz	r3, 8003d88 <_free_r+0x50>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d9fa      	bls.n	8003d7e <_free_r+0x46>
 8003d88:	6811      	ldr	r1, [r2, #0]
 8003d8a:	1855      	adds	r5, r2, r1
 8003d8c:	42a5      	cmp	r5, r4
 8003d8e:	d10b      	bne.n	8003da8 <_free_r+0x70>
 8003d90:	6824      	ldr	r4, [r4, #0]
 8003d92:	4421      	add	r1, r4
 8003d94:	1854      	adds	r4, r2, r1
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	6011      	str	r1, [r2, #0]
 8003d9a:	d1e0      	bne.n	8003d5e <_free_r+0x26>
 8003d9c:	681c      	ldr	r4, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	6053      	str	r3, [r2, #4]
 8003da2:	4421      	add	r1, r4
 8003da4:	6011      	str	r1, [r2, #0]
 8003da6:	e7da      	b.n	8003d5e <_free_r+0x26>
 8003da8:	d902      	bls.n	8003db0 <_free_r+0x78>
 8003daa:	230c      	movs	r3, #12
 8003dac:	6003      	str	r3, [r0, #0]
 8003dae:	e7d6      	b.n	8003d5e <_free_r+0x26>
 8003db0:	6825      	ldr	r5, [r4, #0]
 8003db2:	1961      	adds	r1, r4, r5
 8003db4:	428b      	cmp	r3, r1
 8003db6:	bf04      	itt	eq
 8003db8:	6819      	ldreq	r1, [r3, #0]
 8003dba:	685b      	ldreq	r3, [r3, #4]
 8003dbc:	6063      	str	r3, [r4, #4]
 8003dbe:	bf04      	itt	eq
 8003dc0:	1949      	addeq	r1, r1, r5
 8003dc2:	6021      	streq	r1, [r4, #0]
 8003dc4:	6054      	str	r4, [r2, #4]
 8003dc6:	e7ca      	b.n	8003d5e <_free_r+0x26>
 8003dc8:	b003      	add	sp, #12
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	20000468 	.word	0x20000468

08003dd0 <_realloc_r>:
 8003dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd4:	4680      	mov	r8, r0
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	460e      	mov	r6, r1
 8003dda:	b921      	cbnz	r1, 8003de6 <_realloc_r+0x16>
 8003ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	4611      	mov	r1, r2
 8003de2:	f7ff bc0f 	b.w	8003604 <_malloc_r>
 8003de6:	b92a      	cbnz	r2, 8003df4 <_realloc_r+0x24>
 8003de8:	f7ff ffa6 	bl	8003d38 <_free_r>
 8003dec:	4625      	mov	r5, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df4:	f000 f81b 	bl	8003e2e <_malloc_usable_size_r>
 8003df8:	4284      	cmp	r4, r0
 8003dfa:	4607      	mov	r7, r0
 8003dfc:	d802      	bhi.n	8003e04 <_realloc_r+0x34>
 8003dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e02:	d812      	bhi.n	8003e2a <_realloc_r+0x5a>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4640      	mov	r0, r8
 8003e08:	f7ff fbfc 	bl	8003604 <_malloc_r>
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0ed      	beq.n	8003dee <_realloc_r+0x1e>
 8003e12:	42bc      	cmp	r4, r7
 8003e14:	4622      	mov	r2, r4
 8003e16:	4631      	mov	r1, r6
 8003e18:	bf28      	it	cs
 8003e1a:	463a      	movcs	r2, r7
 8003e1c:	f7ff fb72 	bl	8003504 <memcpy>
 8003e20:	4631      	mov	r1, r6
 8003e22:	4640      	mov	r0, r8
 8003e24:	f7ff ff88 	bl	8003d38 <_free_r>
 8003e28:	e7e1      	b.n	8003dee <_realloc_r+0x1e>
 8003e2a:	4635      	mov	r5, r6
 8003e2c:	e7df      	b.n	8003dee <_realloc_r+0x1e>

08003e2e <_malloc_usable_size_r>:
 8003e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e32:	1f18      	subs	r0, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bfbc      	itt	lt
 8003e38:	580b      	ldrlt	r3, [r1, r0]
 8003e3a:	18c0      	addlt	r0, r0, r3
 8003e3c:	4770      	bx	lr
	...

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
